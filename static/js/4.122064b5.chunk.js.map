{"version":3,"sources":["../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js","../node_modules/framer-motion/dist/es/motion/features/drag.js","../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js","../node_modules/framer-motion/dist/es/gestures/drag/use-drag.js","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js","../node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js","../node_modules/framer-motion/dist/es/motion/features/layout/Animate.js","../node_modules/framer-motion/dist/es/motion/features/layout/Measure.js","../node_modules/framer-motion/dist/es/motion/features/layout/index.js","../node_modules/framer-motion/dist/es/utils/shallow-compare.js","../node_modules/framer-motion/dist/es/utils/is-numerical-string.js","../node_modules/framer-motion/dist/es/render/dom/value-types/test.js","../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js","../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js","../node_modules/framer-motion/dist/es/render/dom/value-types/find.js","../node_modules/framer-motion/dist/es/render/utils/setters.js","../node_modules/framer-motion/dist/es/render/utils/animation.js","../node_modules/framer-motion/dist/es/render/utils/animation-state.js","../node_modules/framer-motion/dist/es/motion/features/animations.js","../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js","../node_modules/framer-motion/dist/es/motion/features/gestures.js","../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js","../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js","../node_modules/framer-motion/dist/es/render/utils/state.js","../node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js","../node_modules/framer-motion/dist/es/render/utils/lifecycles.js","../node_modules/framer-motion/dist/es/render/utils/flat-tree.js","../node_modules/framer-motion/dist/es/render/index.js","../node_modules/framer-motion/dist/es/render/utils/motion-values.js","../node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js","../node_modules/framer-motion/dist/es/render/utils/projection.js","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js","../node_modules/framer-motion/dist/es/render/html/visual-element.js","../node_modules/framer-motion/dist/es/render/svg/visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-animation.js","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.js","../node_modules/framer-motion/dist/es/render/dom/features-max.js"],"names":["makeRenderlessComponent","hook","props","drag","pan","_a","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","useRef","transformPagePoint","useContext","MotionConfigContext","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","useEffect","updateHandlers","usePointerEvent","PanSession","useUnmountEffect","end","groupDragControls","dragControls","useConstant","VisualElementDragControls","setProps","__assign","subscribe","mount","isCSSVariable","value","startsWith","cssVariableRegex","getVariableValue","element","depth","invariant","__read","match","exec","parseCSSVariable","token","fallback","resolved","window","getComputedStyle","getPropertyValue","trim","pixelsToPercent","pixels","axis","max","min","varToken","borderCorrectionDefinition","process","latest","_layoutState","target","px","test","parseFloat","x","y","defaultScaleCorrectors","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","delta","treeScale","original","containsCSSVariables","includes","cssVariables","replace","push","shadow","complex","parse","length","template","createTransformer","offset","xScale","scale","yScale","averageScale","mix","output","i_1","cssVariable","Animate","_super","_this","apply","this","arguments","frameTarget","axisBox","currentAnimationTarget","isAnimating","stopAxisAnimation","undefined","isAnimatingTree","animate","origin","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","__rest","_b","layout","safeToRemove","isRelative","projectionParent","getProjectionParent","prevParentViewportBox","prevViewportBox","parentLayout","getLayoutState","checkIfParentHasChanged","isProvidedCorrectDataForRelativeSharedLayout","calcRelativeOffset","boxHasMoved","hasMoved","animations","eachAxis","targetLength","projection","isTargetLocked","animateAxis","call","setProjectionTargetAxis","setVisibility","VisibilityAction","Show","syncRender","Promise","all","then","notifyLayoutAnimationComplete","__extends","prototype","componentDidMount","animateMotionValue","startAnimation","enableLayoutProjection","unsubLayoutReady","onLayoutUpdate","layoutSafeToRemove","addScaleCorrection","componentWillUnmount","_c","_d","transition","axisIsEqual","layoutProgress","getProjectionAnimationProgress","clearListeners","set","frame","p","get","tweenAxis","unsubscribeProgress","onChange","stop","layoutTransition","getDefaultTransition","defaultLayoutTransition","getValueTransition","render","React","a","b","isZeroBox","zeroAxis","duration","ease","Measure","syncLayout","framerSyncLayout","isSharedLayout","register","onUnmount","remove","getSnapshotBeforeUpdate","syncUpdate","snapshotViewportBox","add","componentDidUpdate","flush","React__default","Component","layoutAnimations","measureLayout","SharedLayoutContext","FramerTreeLayoutContext","createElement","layoutAnimation","usePresence","shallowCompare","next","prev","Array","isArray","prevLength","i","testValueType","v","type","dimensionValueTypes","number","percent","degrees","vw","vh","findDimensionValueType","find","valueTypes","__spreadArray","color","findValueType","setMotionValue","key","hasValue","getValue","addValue","motionValue","setTarget","definition","resolveVariant","makeTargetAnimatable","transitionEnd","resolveFinalValueInKeyframes","getOriginFromTransition","from","animateVariant","variant","options","custom","transitionOverride","getAnimation","animateTarget","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","forEach","child","delay","notifyAnimationComplete","animateChildren","when","first","last","_e","_f","animationTypeState","animationState","getState","valueTarget","shouldBlockAnimation","animation","sortNodePosition","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","variantPriorityOrder","AnimationType","Hover","Tap","Drag","Focus","Exit","reversePriorityOrder","reverse","numAnimationTypes","animateList","map","notifyAnimationStart","resolvedDefinition","animateVisualElement","createAnimationState","state","createTypeState","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","shouldAnimateType","isVariantLabels","variantsHaveChanged","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","delete","isKeyframesTarget","has","blockInitialAnimation","fallbackAnimation_1","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","isAnimated","setActive","setAnimateFunction","makeAnimator","exit","isPresent","onExitComplete","presenceContext","PresenceContext","createHoverEvent","callback","isMouseEvent","isDragActive","isNodeOrChild","parent","parentElement","gestureAnimations","tap","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","cancelPointerEndListeners","removePointerEndListener","checkPointerEnd","onPointerUp","getInstance","onPointerCancel","pipe","addPointerEvent","focus","whileFocus","useDomEvent","hover","onHoverStart","onHoverEnd","whileHover","createLayoutState","isHydrated","layoutCorrected","deltaFinal","deltaTransform","zeroLayout","buildLayoutProjectionTransform","latestTransform","transform","translate","rotate","rotateX","rotateY","identityProjection","buildLayoutProjectionTransformOrigin","names","FlatTree","children","isDirty","addUniqueItem","removeItem","compareByDepth","treeType","build","measureViewportBox","renderInstance","readValueFromInstance","resetTransform","restoreTransform","removeValueFromRenderState","scrapeMotionValuesFromProps","presenceId","visualState","instance","unsubscribeFromLeadVisualElement","crossfader","projectionTargetProgress","removeFromVariantTree","latestValues","renderState","lifecycles","managers","SubscriptionManager","propSubscriptions","clearAllListeners","manager","clear","updatePropListeners","name","on","propListener","handler","args","_i","notify","createLifecycles","isEnabled","targetFinal","leadProjection","leadLatestValues","layoutState","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","baseTarget","isProjectionReady","applyBoxTransforms","updateBoxDelta","triggerBuild","valuesToRender","crossfadedValues","getCrossfadeState","update","notifyUpdate","updateTreeLayoutProjection","layoutTree","fireUpdateLayoutProjection","initialMotionValues","isMotionValue","isControllingVariants","checkIfControllingVariants","isVariantNode","checkIfVariantNode","path","isVisible","isMounted","newInstance","pointTo","addVariantChild","unmount","cancelSync","preRender","updateLayoutProjection","stopLayoutAnimation","closestVariantNode","getClosestVariantNode","other","scheduleUpdateLayoutProjection","sync","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","visibility","scheduleRender","canMutate","removeValue","removeOnChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","bindToMotionValue","defaultValue","forEachValue","readValue","setBaseTarget","newProps","nextValue","prevValue","existingValue","hasAnimated","updateMotionValuesFromProps","getVariant","variants","startAtParent","context_1","numVariantProps","name_1","variantProps","lockProjectionTarget","unlockProjectionTarget","setCrossfader","newCrossfader","startLayoutAnimation","progress","relativeTarget","withTransform","viewportBox","removeBoxTransforms","notifySetAxisTarget","rebaseProjectionTarget","force","box","shouldRebase","notifyLayoutReady","relativeOffset","setCurrentViewportBox","notifyLayoutUpdate","prevTreeScaleX","prevTreeScaleY","prevDeltaTransform","treePath","transformOrigin","resetBox","applyTreeDeltas","updateLayoutDeltas","notifyViewportBoxUpdate","fireResolveRelativeTargetBox","foundParent","ancestor","resolveRelativeTargetBox","relativeParent","calcRelativeBox","isDraggable","shouldResetTransform","_layoutResetTransform","newLead","onSetAxisTarget","onLayoutAnimationComplete","presence","Presence","Present","Entering","BoundingBoxDimension","positionalKeys","isPositionalKey","setAndResetVelocity","to","isNumOrPxType","getPosFromMatrix","matrix","pos","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformProps","filter","positionalValues","width","height","top","left","bottom","right","checkAndConvertChangedValueTypes","targetPositionalKeys","Object","keys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","numKeyframes","removedTransforms","removeNonTranslationalTransform","convertedTarget","changedKeys","originBbox","elementComputedStyle","display","originComputedStyle","targetBbox","convertChangedValueTypes","unitConversion","some","hasPositionalKey","parseDomVariant","HTMLElement","resolveCSSVariables","htmlConfig","domElement","isTransformProp","defaultType","getDefaultValueType","default","computedStyle","compareDocumentPosition","style","getBoundingBox","transformTemplate","mutableState","vars","transformValues","getOrigin","newValueKeys","numNewValues","targetValue","getAnimatableNone","checkTargetForNewValues","parsed","isProjectionTranform","buildHTMLStyles","renderHTML","htmlVisualElement","svgVisualElement","camelCaseAttributes","camelToDash","getAttribute","_element","buildSVGAttrs","renderSVG","domAnimation","renderer","isSVGComponent","enableHardwareAcceleration","domMax"],"mappings":"6NAAA,IAAIA,EAA0B,SAAUC,GAAQ,OAAO,SAAUC,GAE7D,OADAD,EAAKC,GACE,OCEPC,EAAO,CACPC,IAAKJ,GCaT,SAAuBK,GACnB,IAAIC,EAAQD,EAAGC,MAAOC,EAAaF,EAAGE,WAAYC,EAAWH,EAAGG,SAAUC,EAAoBJ,EAAGI,kBAAmBC,EAAgBL,EAAGK,cACnIC,EAAeL,GAASC,GAAcC,GAAYC,EAClDG,EAAaC,iBAAO,MACpBC,EAAqBC,qBAAWC,KAAqBF,mBACrDG,EAAW,CACXC,eAAgBT,EAChBU,QAASZ,EACTa,OAAQd,EACRe,MAAO,SAAUC,EAAOC,GACpBX,EAAWY,QAAU,KACrBhB,GAAYA,EAASc,EAAOC,KAGpCE,qBAAU,WACqB,OAAvBb,EAAWY,SACXZ,EAAWY,QAAQE,eAAeT,MAQ1CU,YAAgBjB,EAAe,cAAeC,GAL9C,SAAuBW,GACnBV,EAAWY,QAAU,IAAII,IAAWN,EAAOL,EAAU,CACjDH,mBAAoBA,MAI5Be,aAAiB,WAAc,OAAOjB,EAAWY,SAAWZ,EAAWY,QAAQM,YDrC/E3B,KAAMH,GEKV,SAAiBE,GACb,IAAI6B,EAAoB7B,EAAM8B,aAActB,EAAgBR,EAAMQ,cAC9DI,EAAqBC,qBAAWC,KAAqBF,mBACrDkB,EAAeC,aAAY,WAC3B,OAAO,IAAIC,IAA0B,CACjCxB,cAAeA,OAGvBsB,EAAaG,SAASC,YAASA,YAAS,GAAIlC,GAAQ,CAAEY,mBAAoBA,KAG1EW,qBAAU,WAAc,OAAOM,GAAqBA,EAAkBM,UAAUL,KAAkB,CAACA,IAEnGP,qBAAU,WAAc,OAAOO,EAAaM,MAAM5B,KAAmB,Q,0FCrBzE,SAAS6B,EAAcC,GACnB,MAAwB,kBAAVA,GAAsBA,EAAMC,WAAW,UAWzD,IAAIC,EAAmB,uDASvB,SAASC,EAAiBnB,EAASoB,EAASC,QAC1B,IAAVA,IAAoBA,EAAQ,GAChCC,YAAUD,GAHC,EAGkB,yDAA4DrB,EAAU,wDACnG,IAAInB,EAAK0C,YAXb,SAA0BvB,GACtB,IAAIwB,EAAQN,EAAiBO,KAAKzB,GAClC,IAAKwB,EACD,MAAO,CAAC,GACZ,IAAI3C,EAAK0C,YAAOC,EAAO,GACvB,MAAO,CAD4B3C,EAAG,GAAeA,EAAG,IAOxC6C,CAAiB1B,GAAU,GAAI2B,EAAQ9C,EAAG,GAAI+C,EAAW/C,EAAG,GAE5E,GAAK8C,EAAL,CAGA,IAAIE,EAAWC,OAAOC,iBAAiBX,GAASY,iBAAiBL,GACjE,OAAIE,EACOA,EAASI,OAEXlB,EAAca,GAEZT,EAAiBS,EAAUR,EAASC,EAAQ,GAG5CO,GCpCf,SAASM,EAAgBC,EAAQC,GAC7B,OAAQD,GAAUC,EAAKC,IAAMD,EAAKE,KAAQ,IA+B9C,IAAIC,EAAW,QAkDf,IAAIC,EAA6B,CAC7BC,QAzEJ,SAA6BC,EAAQC,EAAc9D,GAC/C,IAAI+D,EAAS/D,EAAG+D,OAKhB,GAAsB,kBAAXF,EAAqB,CAC5B,IAAIG,IAAGC,KAAKJ,GAIR,OAAOA,EAHPA,EAASK,WAAWL,GAY5B,OAFQR,EAAgBQ,EAAQE,EAAOI,GAE5B,KADHd,EAAgBQ,EAAQE,EAAOK,GACjB,MAuDtBC,EAAyB,CACzBC,aAAcvC,YAASA,YAAS,GAAI4B,GAA6B,CAAEY,QAAS,CACpE,sBACA,uBACA,yBACA,6BAERC,oBAAqBb,EACrBc,qBAAsBd,EACtBe,uBAAwBf,EACxBgB,wBAAyBhB,EACzBiB,UAAW,CACPhB,QAhER,SAA0BC,EAAQ7D,GAC9B,IAAI6E,EAAQ7E,EAAG6E,MAAOC,EAAY9E,EAAG8E,UACjCC,EAAWlB,EAIXmB,EAAuBnB,EAAOoB,SAAS,QACvCC,EAAe,GACfF,IACAnB,EAASA,EAAOsB,QAAQ9C,GAAkB,SAAUM,GAEhD,OADAuC,EAAaE,KAAKzC,GACXe,MAGf,IAAI2B,EAASC,IAAQC,MAAM1B,GAE3B,GAAIwB,EAAOG,OAAS,EAChB,OAAOT,EACX,IAAIU,EAAWH,IAAQI,kBAAkB7B,GACrC8B,EAA8B,kBAAdN,EAAO,GAAkB,EAAI,EAE7CO,EAASf,EAAMV,EAAE0B,MAAQf,EAAUX,EACnC2B,EAASjB,EAAMT,EAAEyB,MAAQf,EAAUV,EACvCiB,EAAO,EAAIM,IAAWC,EACtBP,EAAO,EAAIM,IAAWG,EAOtB,IAAIC,EAAeC,YAAIJ,EAAQE,EAAQ,IAEL,kBAAvBT,EAAO,EAAIM,KAClBN,EAAO,EAAIM,IAAWI,GAEQ,kBAAvBV,EAAO,EAAIM,KAClBN,EAAO,EAAIM,IAAWI,GAC1B,IAAIE,EAASR,EAASJ,GACtB,GAAIL,EAAsB,CACtB,IAAIkB,EAAM,EACVD,EAASA,EAAOd,QAAQzB,GAAU,WAC9B,IAAIyC,EAAcjB,EAAagB,GAE/B,OADAA,IACOC,KAGf,OAAOF,KCzEPG,EAAyB,SAAUC,GAEnC,SAASD,IACL,IAAIE,EAAmB,OAAXD,GAAmBA,EAAOE,MAAMC,KAAMC,YAAcD,KAmIhE,OA9HAF,EAAMI,YAAcC,cAKpBL,EAAMM,uBAAyBD,cAI/BL,EAAMO,YAAc,CAChB1C,GAAG,EACHC,GAAG,GAEPkC,EAAMQ,kBAAoB,CACtB3C,OAAG4C,EACH3C,OAAG2C,GAEPT,EAAMU,iBAAkB,EACxBV,EAAMW,QAAU,SAAUlD,EAAQmD,EAAQlH,QAC3B,IAAPA,IAAiBA,EAAK,IAC1B,IAAImH,EAAYnH,EAAGmH,UAAWC,EAAYpH,EAAGoH,UAAWC,EAAmBrH,EAAGqH,iBAAkBC,EAAqBtH,EAAGsH,mBAAoBC,EAAavH,EAAGuH,WAAYC,EAAaxH,EAAGwH,WAAYC,EAASC,YAAO1H,EAAI,CAAC,YAAa,YAAa,mBAAoB,qBAAsB,aAAc,eACvS2H,EAAKrB,EAAMzG,MAAOQ,EAAgBsH,EAAGtH,cAAeuH,EAASD,EAAGC,OAIpE,IAA2B,IAAvBN,EAEA,OADAhB,EAAMU,iBAAkB,EACjBV,EAAMuB,eAKjB,IAAIvB,EAAMU,kBAA0C,IAAvBM,EAA7B,CAGSA,IACLhB,EAAMU,iBAAkB,GAM5BE,EAASC,GAAaD,EACtBnD,EAASqD,GAAarD,EAMtB,IAAI+D,GAAa,EACbC,EAAmB1H,EAAc2H,sBACrC,GAAID,EAAkB,CAClB,IAAIE,EAAwBF,EAAiBG,gBACzCC,EAAeJ,EAAiBK,iBAAiBR,OAIjDJ,IAMIJ,IACAe,EAAeX,EAAWY,iBAAiBR,QAO3CT,IACCkB,YAAwBb,EAAYO,IACrCP,EAAWU,kBACXD,EAAwBT,EAAWU,kBAGvCD,GACAK,EAA6Cd,EAAYL,EAAWC,KACpEU,GAAa,EACbZ,EAASqB,YAAmBN,EAAuBf,GACnDnD,EAASwE,YAAmBJ,EAAcpE,IAGlD,IAAIyE,EAAcC,EAASvB,EAAQnD,GAC/B2E,EAAaC,aAAS,SAAUpF,GAChC,IAAIvD,EAAI2H,EAKR,GAAe,aAAXC,EAAuB,CACvB,IAAIgB,EAAe7E,EAAOR,GAAMC,IAAMO,EAAOR,GAAME,IACnDyD,EAAO3D,GAAMC,IAAM0D,EAAO3D,GAAME,IAAMmF,EAE1C,IAAIvI,EAAcwI,WAAWC,eAGxB,YAAyB/B,IAArBM,EAGAmB,EAGElC,EAAMyC,YAAYxF,EAAMQ,EAAOR,GAAO2D,EAAO3D,GAAOxB,YAASA,YAAS,GAAI0F,GAAS,CAAEK,WAAYA,MAGxD,QAA/CH,GAAM3H,EAAKsG,EAAMQ,mBAAmBvD,UAA0B,IAAPoE,GAAyBA,EAAGqB,KAAKhJ,GAGlFK,EAAc4I,wBAAwB1F,EAAMQ,EAAOR,GAAME,IAAKM,EAAOR,GAAMC,IAAKsE,SAXvFzH,EAAc6I,cAAc7B,IAAqB8B,IAAiBC,SAqB1E,OANA/I,EAAcgJ,aAMPC,QAAQC,IAAIb,GAAYc,MAAK,WAChClD,EAAMU,iBAAkB,EACxBO,GAAcA,IACdlH,EAAcoJ,qCAGfnD,EA+EX,OApNAoD,YAAUtD,EAASC,GAuInBD,EAAQuD,UAAUC,kBAAoB,WAClC,IAAItD,EAAQE,KACRnG,EAAgBmG,KAAK3G,MAAMQ,cAC/BA,EAAcwJ,mBAAqBC,IACnCzJ,EAAc0J,yBACdvD,KAAKwD,iBAAmB3J,EAAc4J,eAAezD,KAAKS,SAC1D5G,EAAc6J,mBAAqB,WAAc,OAAO5D,EAAMuB,gBAC9DsC,YAAmB9F,IAEvB+B,EAAQuD,UAAUS,qBAAuB,WACrC,IAAI9D,EAAQE,KACZA,KAAKwD,mBACLrB,aAAS,SAAUpF,GAAQ,IAAIvD,EAAI2H,EAAI,OAAuD,QAA/CA,GAAM3H,EAAKsG,EAAMQ,mBAAmBvD,UAA0B,IAAPoE,OAAgB,EAASA,EAAGqB,KAAKhJ,OAO3IoG,EAAQuD,UAAUZ,YAAc,SAAUxF,EAAMQ,EAAQmD,EAAQlH,GAC5D,IACI2H,EAAI0C,EADJ/D,EAAQE,KAER8D,OAAY,IAAPtK,EAAgB,GAAKA,EAAIuK,EAAaD,EAAGC,WAAYzC,EAAawC,EAAGxC,WAI9E,IAAItB,KAAKK,YAAYtD,KACjBiH,EAAYzG,EAAQyC,KAAKI,uBAAuBrD,IADpD,CAI+C,QAA9C8G,GAAM1C,EAAKnB,KAAKM,mBAAmBvD,UAA0B,IAAP8G,GAAyBA,EAAGrB,KAAKrB,GACxFnB,KAAKK,YAAYtD,IAAQ,EACzB,IAAIlD,EAAgBmG,KAAK3G,MAAMQ,cAC3BqG,EAAcF,KAAKE,YAAYnD,GAC/BkH,EAAiBpK,EAAcqK,iCAAiCnH,GAKpEkH,EAAeE,iBACfF,EAAeG,IAAI,GACnBH,EAAeG,IAAI,GAKnB,IAAIC,EAAQ,WAER,IAAIC,EAAIL,EAAeM,MAzLd,IA2LTC,YAAUtE,EAAaQ,EAAQnD,EAAQ+G,GACvCzK,EAAc4I,wBAAwB1F,EAAMmD,EAAYjD,IAAKiD,EAAYlD,IAAKsE,IAGlF+C,IAEA,IAAII,EAAsBR,EAAeS,SAASL,GAClDrE,KAAKM,kBAAkBvD,GAAQ,WAC3B+C,EAAMO,YAAYtD,IAAQ,EAC1BkH,EAAeU,OACfF,KAEJzE,KAAKI,uBAAuBrD,GAAQQ,EACpC,IAAIqH,EAAmBb,GACnBlK,EAAcgL,wBACdC,EAGJ,OADgBxB,YAAwB,MAATvG,EAAe,UAAY,UAAWkH,EA5MxD,IA4MwFW,GAAoBG,YAAmBH,EAAkB,WAAW5B,KAAKhD,KAAKM,kBAAkBvD,MAGzM6C,EAAQuD,UAAU9B,aAAe,WAC7B,IAAI7H,EAAI2H,EACkC,QAAzCA,GAAM3H,EAAKwG,KAAK3G,OAAOgI,oBAAiC,IAAPF,GAAyBA,EAAGqB,KAAKhJ,IAEvFoG,EAAQuD,UAAU6B,OAAS,WACvB,OAAO,MAEJpF,EArNkB,CAsN3BqF,aAKF,SAAShD,EAASiD,EAAGC,GACjB,OAASC,EAAUF,KACdE,EAAUD,MACTnB,EAAYkB,EAAEvH,EAAGwH,EAAExH,KAAOqG,EAAYkB,EAAEtH,EAAGuH,EAAEvH,IAEvD,IAAIyH,EAAW,CAAEpI,IAAK,EAAGD,IAAK,GAC9B,SAASoI,EAAUF,GACf,OAAOlB,EAAYkB,EAAEvH,EAAG0H,IAAarB,EAAYkB,EAAEtH,EAAGyH,GAE1D,SAASrB,EAAYkB,EAAGC,GACpB,OAAOD,EAAEjI,MAAQkI,EAAElI,KAAOiI,EAAElI,MAAQmI,EAAEnI,IAE1C,IAAI8H,EAA0B,CAC1BQ,SAAU,IACVC,KAAM,CAAC,GAAK,EAAG,GAAK,IAExB,SAASzD,EAA6Cd,EAAYL,EAAWC,GACzE,OAAOI,IAAgBA,KAAgBL,GAAaC,G,oBChPpD4E,EAAyB,SAAU3F,GAEnC,SAAS2F,IACL,OAAkB,OAAX3F,GAAmBA,EAAOE,MAAMC,KAAMC,YAAcD,KA4C/D,OA9CAkD,YAAUsC,EAAS3F,GAOnB2F,EAAQrC,UAAUC,kBAAoB,WAClC,IAAI5J,EAAKwG,KAAK3G,MAAOoM,EAAajM,EAAGiM,WAAYC,EAAmBlM,EAAGkM,iBAAkB7L,EAAgBL,EAAGK,cAC5G8L,YAAeF,IAAeA,EAAWG,SAAS/L,GAClD8L,YAAeD,IACXA,EAAiBE,SAAS/L,GAC9BA,EAAcgM,WAAU,WAChBF,YAAeF,IACfA,EAAWK,OAAOjM,GAElB8L,YAAeD,IACfA,EAAiBI,OAAOjM,OAUpC2L,EAAQrC,UAAU4C,wBAA0B,WACxC,IAAIvM,EAAKwG,KAAK3G,MAAOoM,EAAajM,EAAGiM,WAAY5L,EAAgBL,EAAGK,cAQpE,OAPI8L,YAAeF,GACfA,EAAWO,cAGXC,YAAoBpM,GACpB4L,EAAWS,IAAIrM,IAEZ,MAEX2L,EAAQrC,UAAUgD,mBAAqB,WACnC,IAAIV,EAAazF,KAAK3G,MAAMoM,WACvBE,YAAeF,IAChBA,EAAWW,SAEnBZ,EAAQrC,UAAU6B,OAAS,WACvB,OAAO,MAEJQ,EA/CkB,CAgD3Ba,IAAeC,WCrDjB,IAAIC,EAAmB,CACnBC,cDqDJ,SAAgCnN,GAC5B,IAAIoM,EAAavL,qBAAWuM,KACxBf,EAAmBxL,qBAAWwM,KAClC,OAAQL,IAAeM,cAAcnB,EAASjK,YAAS,GAAIlC,EAAO,CAAEoM,WAAYA,EAAYC,iBAAkBA,MCvD9GkB,gBF8NJ,SAAsCvN,GAClC,IAAmCgI,EAA1BnF,YAAO2K,cAAe,GAAsB,GACrD,OAAO5B,gBAAoBrF,EAASrE,YAAS,GAAIlC,EAAO,CAAEgI,aAAcA,O,yBGrO5E,SAASyF,EAAeC,EAAMC,GAC1B,IAAKC,MAAMC,QAAQF,GACf,OAAO,EACX,IAAIG,EAAaH,EAAKhI,OACtB,GAAImI,IAAeJ,EAAK/H,OACpB,OAAO,EACX,IAAK,IAAIoI,EAAI,EAAGA,EAAID,EAAYC,IAC5B,GAAIJ,EAAKI,KAAOL,EAAKK,GACjB,OAAO,EAEf,OAAO,ECPX,I,yCCAIC,EAAgB,SAAUC,GAAK,OAAO,SAAUC,GAAQ,OAAOA,EAAK9J,KAAK6J,KCIzEE,EAAsB,CAACC,IAAQjK,IAAIkK,IAASC,IAASC,IAAIC,ICJlD,CACPpK,KAAM,SAAU6J,GAAK,MAAa,SAANA,GAC5BvI,MAAO,SAAUuI,GAAK,OAAOA,KDM7BQ,GAAyB,SAAUR,GACnC,OAAOE,EAAoBO,KAAKV,EAAcC,KEJ9CU,GAAaC,YAAcA,YAAc,GAAI/L,YAAOsL,IAAuB,CAACU,IAAOpJ,MAInFqJ,GAAgB,SAAUb,GAAK,OAAOU,GAAWD,KAAKV,EAAcC,K,SCCxE,SAASc,GAAevO,EAAewO,EAAK1M,GACpC9B,EAAcyO,SAASD,GACvBxO,EAAc0O,SAASF,GAAKjE,IAAIzI,GAGhC9B,EAAc2O,SAASH,EAAKI,YAAY9M,IAGhD,SAAS+M,GAAU7O,EAAe8O,GAC9B,IAAInM,EAAWoM,aAAe/O,EAAe8O,GACzCnP,EAAKgD,EACH3C,EAAcgP,qBAAqBrM,GAAU,GAC7C,GAAI2E,EAAK3H,EAAGsP,cAAeA,OAAuB,IAAP3H,EAAgB,GAAKA,EAAI3H,EAAGuK,WAAY,IAAIxG,EAAS2D,YAAO1H,EAAI,CAAC,gBAAiB,eAEnI,IAAK,IAAI6O,KADT9K,EAAShC,YAASA,YAAS,GAAIgC,GAASuL,GAChB,CAEpBV,GAAevO,EAAewO,EADlBU,YAA6BxL,EAAO8K,MAsExD,SAASW,GAAwBX,EAAKtE,GAClC,GAAKA,EAGL,OADsBA,EAAWsE,IAAQtE,EAAU,SAAeA,GAC3CkF,KCvE3B,SAASC,GAAerP,EAAesP,EAASC,GAC5C,IAAI5P,OACY,IAAZ4P,IAAsBA,EAAU,IACpC,IAAI5M,EAAWoM,aAAe/O,EAAesP,EAASC,EAAQC,QAC1DlI,GAAM3E,GAAY,IAAIuH,WAAYA,OAAoB,IAAP5C,EAAgBtH,EAAcgL,wBAA0B,GAAK1D,EAC5GiI,EAAQE,qBACRvF,EAAaqF,EAAQE,oBAMzB,IAAIC,EAAe/M,EACb,WAAc,OAAOgN,GAAc3P,EAAe2C,EAAU4M,IAC5D,WAAc,OAAOtG,QAAQ2G,WAK/BC,GAA+D,QAAxClQ,EAAKK,EAAc8P,uBAAoC,IAAPnQ,OAAgB,EAASA,EAAGoQ,MACjG,SAAUC,QACa,IAAjBA,IAA2BA,EAAe,GAC9C,IAAIrQ,EAAKuK,EAAW+F,cAAeA,OAAuB,IAAPtQ,EAAgB,EAAIA,EAAIuQ,EAAkBhG,EAAWgG,gBAAiBC,EAAmBjG,EAAWiG,iBACvJ,OA6CZ,SAAyBnQ,EAAesP,EAASW,EAAeC,EAAiBC,EAAkBZ,QACzE,IAAlBU,IAA4BA,EAAgB,QACxB,IAApBC,IAA8BA,EAAkB,QAC3B,IAArBC,IAA+BA,EAAmB,GACtD,IAAI9H,EAAa,GACb+H,GAAsBpQ,EAAc8P,gBAAgBC,KAAO,GAAKG,EAChEG,EAA+C,IAArBF,EACxB,SAAU5C,GAER,YADU,IAANA,IAAgBA,EAAI,GACjBA,EAAI2C,GAEb,SAAU3C,GAER,YADU,IAANA,IAAgBA,EAAI,GACjB6C,EAAqB7C,EAAI2C,GAOxC,OALA9C,MAAMgC,KAAKpP,EAAc8P,iBACpBQ,KAAKC,IACLC,SAAQ,SAAUC,EAAOlD,GAC1BlF,EAAWtD,KAAKsK,GAAeoB,EAAOnB,EAAS5N,YAASA,YAAS,GAAI6N,GAAU,CAAEmB,MAAOT,EAAgBI,EAAwB9C,MAAOpE,MAAK,WAAc,OAAOsH,EAAME,wBAAwBrB,UAE5LrG,QAAQC,IAAIb,GAjEJuI,CAAgB5Q,EAAesP,EAASW,EAAgBD,EAAcE,EAAiBC,EAAkBZ,IAElH,WAAc,OAAOtG,QAAQ2G,WAK/BiB,EAAO3G,EAAW2G,KACtB,GAAIA,EAAM,CACN,IAAI7G,EAAK3H,YAAgB,mBAATwO,EACV,CAACnB,EAAcG,GACf,CAACA,EAAoBH,GAAe,GAAIoB,EAAQ9G,EAAG,GAAI+G,EAAO/G,EAAG,GACvE,OAAO8G,IAAQ3H,KAAK4H,GAGpB,OAAO9H,QAAQC,IAAI,CAACwG,IAAgBG,EAAmBN,EAAQmB,SAMvE,SAASf,GAAc3P,EAAe8O,EAAYnP,GAC9C,IAAI2H,EACA0C,OAAY,IAAPrK,EAAgB,GAAKA,EAAIsK,EAAKD,EAAG0G,MAAOA,OAAe,IAAPzG,EAAgB,EAAIA,EAAIwF,EAAqBzF,EAAGyF,mBAAoB/B,EAAO1D,EAAG0D,KACnIsD,EAAKhR,EAAcgP,qBAAqBF,GAAamC,EAAKD,EAAG9G,WAAYA,OAAoB,IAAP+G,EAAgBjR,EAAcgL,uBAAyBiG,EAAIhC,EAAgB+B,EAAG/B,cAAevL,EAAS2D,YAAO2J,EAAI,CAAC,aAAc,kBACtNvB,IACAvF,EAAauF,GACjB,IAAIpH,EAAa,GACb6I,EAAqBxD,IAAiD,QAAvCpG,EAAKtH,EAAcmR,sBAAmC,IAAP7J,OAAgB,EAASA,EAAG8J,WAAW1D,IACzH,IAAK,IAAIc,KAAO9K,EAAQ,CACpB,IAAI5B,EAAQ9B,EAAc0O,SAASF,GAC/B6C,EAAc3N,EAAO8K,GACzB,MAAK1M,QACe4E,IAAhB2K,GACCH,GACGI,GAAqBJ,EAAoB1C,IAHjD,CAMA,IAAI+C,EAAY9H,YAAe+E,EAAK1M,EAAOuP,EAAa3P,YAAS,CAAEgP,MAAOA,GAASxG,IACnF7B,EAAWtD,KAAKwM,IAEpB,OAAOtI,QAAQC,IAAIb,GAAYc,MAAK,WAChC8F,GAAiBJ,GAAU7O,EAAeiP,MA4BlD,SAASsB,GAAgBlF,EAAGC,GACxB,OAAOD,EAAEmG,iBAAiBlG,GAQ9B,SAASgG,GAAqB3R,EAAI6O,GAC9B,IAAIiD,EAAgB9R,EAAG8R,cAAeC,EAAiB/R,EAAG+R,eACtDC,EAAcF,EAAcG,eAAepD,KAAgC,IAAxBkD,EAAelD,GAEtE,OADAkD,EAAelD,IAAO,EACfmD,E,aCjIPE,GAAuB,CACvBC,KAAc/L,QACd+L,KAAcC,MACdD,KAAcE,IACdF,KAAcG,KACdH,KAAcI,MACdJ,KAAcK,MAEdC,GAAuBhE,YAAc,GAAI/L,YAAOwP,KAAuBQ,UACvEC,GAAoBT,GAAqB1M,OAC7C,SAASoN,GAAYvS,GACjB,OAAO,SAAUqI,GACb,OAAOY,QAAQC,IAAIb,EAAWmK,KAAI,SAAU7S,GACxC,IAAI4R,EAAY5R,EAAG4R,UAAWhC,EAAU5P,EAAG4P,QAC3C,ODdZ,SAA8BvP,EAAe8O,EAAYS,GAGrD,IAAIgC,EACJ,QAHgB,IAAZhC,IAAsBA,EAAU,IACpCvP,EAAcyS,uBAEVrF,MAAMC,QAAQyB,GAAa,CAC3B,IAAIzG,EAAayG,EAAW0D,KAAI,SAAUlD,GACtC,OAAOD,GAAerP,EAAesP,EAASC,MAElDgC,EAAYtI,QAAQC,IAAIb,QAEvB,GAA0B,kBAAfyG,EACZyC,EAAYlC,GAAerP,EAAe8O,EAAYS,OAErD,CACD,IAAImD,EAA2C,oBAAf5D,EAC1BC,aAAe/O,EAAe8O,EAAYS,EAAQC,QAClDV,EACNyC,EAAY5B,GAAc3P,EAAe0S,EAAoBnD,GAEjE,OAAOgC,EAAUpI,MAAK,WAClB,OAAOnJ,EAAc2Q,wBAAwB7B,MCNlC6D,CAAqB3S,EAAeuR,EAAWhC,QAIlE,SAASqD,GAAqB5S,GAC1B,IAAI4G,EAAU2L,GAAYvS,GACtB6S,EAsSR,WACI,IAAIlT,EACJ,OAAOA,EAAK,IACLmS,KAAc/L,SAAW+M,IAAgB,GAC5CnT,EAAGmS,KAAcC,OAASe,KAC1BnT,EAAGmS,KAAcE,KAAOc,KACxBnT,EAAGmS,KAAcG,MAAQa,KACzBnT,EAAGmS,KAAcI,OAASY,KAC1BnT,EAAGmS,KAAcK,MAAQW,KACzBnT,EA/SQoT,GACRC,EAAkB,GAClBC,GAAkB,EAKlBC,EAA0B,SAAUC,EAAKrE,GACzC,IAAInM,EAAWoM,aAAe/O,EAAe8O,GAC7C,GAAInM,EAAU,CACVA,EAASuH,WAAY,IAAI+E,EAAgBtM,EAASsM,cAAevL,EAAS2D,YAAO1E,EAAU,CAAC,aAAc,kBAC1GwQ,EAAMzR,YAASA,YAASA,YAAS,GAAIyR,GAAMzP,GAASuL,GAExD,OAAOkE,GAsBX,SAASC,EAAe7D,EAAS8D,GAgM7B,IA/LA,IAAI1T,EACAH,EAAQQ,EAAcsT,WACtBC,EAAUvT,EAAcwT,mBAAkB,IAAS,GAKnDnL,EAAa,GAKboL,EAAc,IAAIC,IAMlBC,EAAkB,GAKlBC,EAAsBC,IACtBC,EAAU,SAAUvG,GACpB,IAAIG,EAAO0E,GAAqB7E,GAC5BwG,EAAYlB,EAAMnF,GAClBsG,EAA8B,QAAtBrU,EAAKH,EAAMkO,UAA0B,IAAP/N,EAAgBA,EAAK4T,EAAQ7F,GACnEuG,EAAgBC,aAAeF,GAK/BG,EAAczG,IAAS2F,EAAoBU,EAAUK,SAAW,MAChD,IAAhBD,IACAP,EAAsBrG,GAO1B,IAAI8G,EAAcL,IAAST,EAAQ7F,IAASsG,IAASxU,EAAMkO,IAASuG,EAepE,GAXII,GACApB,GACAjT,EAAcsU,yBACdD,GAAc,GAMlBN,EAAUtC,cAAgB/P,YAAS,GAAIiS,IAIrCI,EAAUK,UAA4B,OAAhBD,IAElBH,IAASD,EAAUQ,UAErBC,YAAoBR,IACJ,mBAATA,EACP,MAAO,WAOX,IAAIS,EAwKhB,SAA6BtH,EAAMD,GAC/B,GAAoB,kBAATA,EACP,OAAOA,IAASC,EAEf,GAAIuH,aAAgBxH,GACrB,OAAQD,EAAeC,EAAMC,GAEjC,OAAO,EA/KyBwH,CAAoBZ,EAAUQ,SAAUP,IAE3DtG,IAAS2F,GACNU,EAAUK,WACTC,GACDJ,GAEH1G,EAAIqG,GAAuBK,EAK5BW,EAAiBxH,MAAMC,QAAQ2G,GAAQA,EAAO,CAACA,GAK/Ca,EAAiBD,EAAeE,OAAO5B,EAAyB,KAChD,IAAhBiB,IACAU,EAAiB,IAUrB,IAAIvN,EAAKyM,EAAUgB,mBAAoBA,OAA4B,IAAPzN,EAAgB,GAAKA,EAC7E0N,EAAUtT,YAASA,YAAS,GAAIqT,GAAqBF,GACrDI,EAAgB,SAAUzG,GAC1BiG,GAAoB,EACpBhB,EAAYyB,OAAO1G,GACnBuF,EAAUrC,eAAelD,IAAO,GAEpC,IAAK,IAAIA,KAAOwG,EAAS,CACrB,IAAI9H,EAAO2H,EAAerG,GACtBrB,EAAO4H,EAAmBvG,GAE1BmF,EAAgB/B,eAAepD,KAK/BtB,IAASC,EAKLgI,YAAkBjI,IAASiI,YAAkBhI,GACxCF,EAAeC,EAAMC,GAQtB4G,EAAUtC,cAAcjD,IAAO,EAP/ByG,EAAczG,QAUJ9H,IAATwG,EAEL+H,EAAczG,GAIdiF,EAAYpH,IAAImC,QAGN9H,IAATwG,GAAsBuG,EAAY2B,IAAI5G,GAK3CyG,EAAczG,GAOduF,EAAUtC,cAAcjD,IAAO,GAOvCuF,EAAUQ,SAAWP,EACrBD,EAAUgB,mBAAqBF,EAI3Bd,EAAUK,WACVT,EAAkBjS,YAASA,YAAS,GAAIiS,GAAkBkB,IAE1D5B,GAAmBjT,EAAcqV,wBACjCZ,GAAoB,GAOpBA,IAAsBJ,GACtBhM,EAAWtD,KAAKmB,MAAMmC,EAAY+F,YAAc,GAAI/L,YAAOuS,EAAepC,KAAI,SAAUjB,GAAa,MAAQ,CACzGA,UAAWA,EACXhC,QAAS7N,YAAS,CAAEgM,KAAMA,GAAQ6B,WAUrChC,EAAI,EAAGA,EAAI+E,GAAmB/E,IACnCuG,EAAQvG,GAQZ,GANAyF,EAAkBtR,YAAS,GAAIiS,GAM3BF,EAAY1D,KAAM,CAClB,IAAIuF,EAAsB,GAC1B7B,EAAYjD,SAAQ,SAAUhC,GAC1B,IAAI+G,EAAiBvV,EAAcwV,cAAchH,QAC1B9H,IAAnB6O,IACAD,EAAoB9G,GAAO+G,MAGnClN,EAAWtD,KAAK,CAAEwM,UAAW+D,IAEjC,IAAIG,EAAgBC,QAAQrN,EAAWlD,QAOvC,OANI8N,IACkB,IAAlBzT,EAAMmW,UACL3V,EAAcsU,yBACfmB,GAAgB,GAEpBxC,GAAkB,EACXwC,EAAgB7O,EAAQyB,GAAcY,QAAQ2G,UAezD,MAAO,CACHgG,WA9PJ,SAAoBpH,GAChB,YAAgC9H,IAAzBsM,EAAgBxE,IA8PvB4E,eAAgBA,EAChByC,UAbJ,SAAmBnI,EAAM0G,EAAU7E,GAC/B,IAAI5P,EAEJ,OAAIkT,EAAMnF,GAAM0G,WAAaA,EAClBnL,QAAQ2G,WAEsB,QAAxCjQ,EAAKK,EAAc8P,uBAAoC,IAAPnQ,GAAyBA,EAAG6Q,SAAQ,SAAUC,GAAS,IAAI9Q,EAAI,OAAuC,QAA/BA,EAAK8Q,EAAMU,sBAAmC,IAAPxR,OAAgB,EAASA,EAAGkW,UAAUnI,EAAM0G,MAC3MvB,EAAMnF,GAAM0G,SAAWA,EAChBhB,EAAe7D,EAAS7B,KAM/BoI,mBA1PJ,SAA4BC,GACxBnP,EAAUmP,EAAa/V,IA0PvBoR,SAAU,WAAc,OAAOyB,IAYvC,SAASC,GAAgBsB,GAErB,YADiB,IAAbA,IAAuBA,GAAW,GAC/B,CACHA,SAAUA,EACV3C,cAAe,GACfC,eAAgB,GAChBqD,mBAAoB,ICtT5B,IAAI1M,GAAa,CACbkJ,UAAWjS,GAAwB,SAAUK,GACzC,IAAIK,EAAgBL,EAAGK,cAAe4G,EAAUjH,EAAGiH,QAMnD5G,EAAcmR,iBAAmBnR,EAAcmR,eAAiByB,GAAqB5S,IAIjFwU,YAAoB5N,IACpB7F,qBAAU,WAAc,OAAO6F,EAAQjF,UAAU3B,KAAmB,CAAC4G,OAG7EoP,KAAM1W,GAAwB,SAAUE,GACpC,IAAIgQ,EAAShQ,EAAMgQ,OAAQxP,EAAgBR,EAAMQ,cAC7CL,EAAK0C,YAAO2K,cAAe,GAAIiJ,EAAYtW,EAAG,GAAIuW,EAAiBvW,EAAG,GACtEwW,EAAkB9V,qBAAW+V,KACjCrV,qBAAU,WACN,IAAIpB,EAAI2H,EACJiK,EAAoD,QAAvC5R,EAAKK,EAAcmR,sBAAmC,IAAPxR,OAAgB,EAASA,EAAGkW,UAAU/D,KAAcK,MAAO8D,EAAW,CAAEzG,OAA4G,QAAnGlI,EAAyB,OAApB6O,QAAgD,IAApBA,OAA6B,EAASA,EAAgB3G,cAA2B,IAAPlI,EAAgBA,EAAKkI,KAChRyG,IAA4B,OAAd1E,QAAoC,IAAdA,GAAgCA,EAAUpI,KAAK+M,MACrF,CAACD,Q,gCC5BZ,SAASI,GAAiBrW,EAAeoU,EAAUkC,GAC/C,OAAO,SAAU1V,EAAOC,GACpB,IAAIlB,EACC4W,aAAa3V,KAAU4V,iBAEf,OAAbF,QAAkC,IAAbA,GAA+BA,EAAS1V,EAAOC,GAC5B,QAAvClB,EAAKK,EAAcmR,sBAAmC,IAAPxR,GAAyBA,EAAGkW,UAAU/D,KAAcC,MAAOqC,KCJnH,IAAIqC,GAAgB,SAAhBA,EAA0BC,EAAQjG,GAClC,QAAKA,IAGIiG,IAAWjG,GAITgG,EAAcC,EAAQjG,EAAMkG,iB,SCV3C,IAAIC,GAAoB,CACpBC,IAAKvX,GCMT,SAAuBK,GACnB,IAAImX,EAAQnX,EAAGmX,MAAOC,EAAapX,EAAGoX,WAAYC,EAAcrX,EAAGqX,YAAaC,EAAWtX,EAAGsX,SAAUjX,EAAgBL,EAAGK,cACvHkX,EAAoBJ,GAASC,GAAcC,GAAeC,EAC1DE,EAAahX,kBAAO,GACpBiX,EAA4BjX,iBAAO,MACvC,SAASkX,IACL,IAAI1X,EACyC,QAA5CA,EAAKyX,EAA0BtW,eAA4B,IAAPnB,GAAyBA,EAAGgJ,KAAKyO,GACtFA,EAA0BtW,QAAU,KAExC,SAASwW,IACL,IAAI3X,EAIJ,OAHA0X,IACAF,EAAWrW,SAAU,EACmB,QAAvCnB,EAAKK,EAAcmR,sBAAmC,IAAPxR,GAAyBA,EAAGkW,UAAU/D,KAAcE,KAAK,IACjGwE,eAEZ,SAASe,EAAY3W,EAAOC,GACnByW,MAMJb,GAAczW,EAAcwX,cAAe5W,EAAM8C,QAElC,OAAVoT,QAA4B,IAAVA,GAA4BA,EAAMlW,EAAOC,GAD3C,OAAhBmW,QAAwC,IAAhBA,GAAkCA,EAAYpW,EAAOC,IAGvF,SAAS4W,EAAgB7W,EAAOC,GACvByW,MAEW,OAAhBN,QAAwC,IAAhBA,GAAkCA,EAAYpW,EAAOC,IAYjFI,YAAgBjB,EAAe,cAAekX,EAV9C,SAAuBtW,EAAOC,GAC1B,IAAIlB,EACJ0X,IACIF,EAAWrW,UAEfqW,EAAWrW,SAAU,EACrBsW,EAA0BtW,QAAU4W,aAAKC,YAAgB/U,OAAQ,YAAa2U,GAAcI,YAAgB/U,OAAQ,gBAAiB6U,IACtH,OAAfV,QAAsC,IAAfA,GAAiCA,EAAWnW,EAAOC,GAClC,QAAvClB,EAAKK,EAAcmR,sBAAmC,IAAPxR,GAAyBA,EAAGkW,UAAU/D,KAAcE,KAAK,UAE3BtL,GAClFvF,YAAiBkW,MDjDjBO,MAAOtY,GEEX,SAAyBK,GACrB,IAAIkY,EAAalY,EAAGkY,WAAY7X,EAAgBL,EAAGK,cASnD8X,aAAY9X,EAAe,QAAS6X,EARtB,WACV,IAAIlY,EACoC,QAAvCA,EAAKK,EAAcmR,sBAAmC,IAAPxR,GAAyBA,EAAGkW,UAAU/D,KAAcI,OAAO,SAMpDxL,GAC3DoR,aAAY9X,EAAe,OAAQ6X,EALtB,WACT,IAAIlY,EACoC,QAAvCA,EAAKK,EAAcmR,sBAAmC,IAAPxR,GAAyBA,EAAGkW,UAAU/D,KAAcI,OAAO,SAGtDxL,MFZzDqR,MAAOzY,GFMX,SAAyBK,GACrB,IAAIqY,EAAerY,EAAGqY,aAAcC,EAAatY,EAAGsY,WAAYC,EAAavY,EAAGuY,WAAYlY,EAAgBL,EAAGK,cAC/GiB,YAAgBjB,EAAe,eAAgBgY,GAAgBE,EACzD7B,GAAiBrW,GAAe,EAAMgY,QACtCtR,GACNzF,YAAgBjB,EAAe,eAAgBiY,GAAcC,EACvD7B,GAAiBrW,GAAe,EAAOiY,QACvCvR,O,sCKZV,SAASyR,KACL,MAAO,CACHC,YAAY,EACZ7Q,OAAQjB,cACR+R,gBAAiB/R,cACjB7B,UAAW,CAAEX,EAAG,EAAGC,EAAG,GACtBS,MAAOA,cACP8T,WAAY9T,cACZ+T,eAAgB,IAGxB,IAAIC,GAAaL,KCdjB,SAASM,GAA+B9Y,EAAI8E,EAAWiU,GACnD,IAAI5U,EAAInE,EAAGmE,EAAGC,EAAIpE,EAAGoE,EASjB4U,EAAY,eAFC7U,EAAE8U,UAAYnU,EAAUX,EAEK,OAD7BC,EAAE6U,UAAYnU,EAAUV,EAC2B,UACpE,GAAI2U,EAAiB,CACjB,IAAIG,EAASH,EAAgBG,OAAQC,EAAUJ,EAAgBI,QAASC,EAAUL,EAAgBK,QAC9FF,IACAF,GAAa,UAAYE,EAAS,MAClCC,IACAH,GAAa,WAAaG,EAAU,MACpCC,IACAJ,GAAa,WAAaI,EAAU,MAG5C,OADAJ,GAAa,SAAW7U,EAAE0B,MAAQ,KAAOzB,EAAEyB,MAAQ,IAC3CkT,GAAmBC,IAAcK,GAA0BL,EAAL,GAKlE,SAASM,GAAqCtZ,GAC1C,IAAI2Y,EAAa3Y,EAAG2Y,WACpB,OAA6B,IAAtBA,EAAWxU,EAAE+C,OAAe,KAA6B,IAAtByR,EAAWvU,EAAE8C,OAAe,MAE1E,IAAImS,GAAqBP,GAA+BD,GAAWhU,MAAOgU,GAAW/T,UAAW,CAAEX,EAAG,EAAGC,EAAG,I,SCjCvGmV,GAAQ,CACR,gBACA,sBACA,eACA,oBACA,SACA,SACA,oBACA,0BACA,iBACA,gBACA,W,sBCXAC,GAA0B,WAC1B,SAASA,IACLhT,KAAKiT,SAAW,GAChBjT,KAAKkT,SAAU,EAenB,OAbAF,EAAS7P,UAAU+C,IAAM,SAAUoE,GAC/B6I,aAAcnT,KAAKiT,SAAU3I,GAC7BtK,KAAKkT,SAAU,GAEnBF,EAAS7P,UAAU2C,OAAS,SAAUwE,GAClC8I,aAAWpT,KAAKiT,SAAU3I,GAC1BtK,KAAKkT,SAAU,GAEnBF,EAAS7P,UAAUkH,QAAU,SAAU8F,GACnCnQ,KAAKkT,SAAWlT,KAAKiT,SAAS9I,KAAKkJ,MACnCrT,KAAKkT,SAAU,EACflT,KAAKiT,SAAS5I,QAAQ8F,IAEnB6C,EAlBmB,G,cCkB1BnZ,GAAgB,SAAUL,GAC1B,IAAI2H,EAAK3H,EAAG8Z,SAAUA,OAAkB,IAAPnS,EAAgB,GAAKA,EAAIoS,EAAQ/Z,EAAG+Z,MAAOlE,EAAgB7V,EAAG6V,cAAexG,EAAuBrP,EAAGqP,qBAAsB2K,EAAqBha,EAAGga,mBAAoBC,EAAiBja,EAAGwL,OAAQ0O,EAAwBla,EAAGka,sBAAuBC,EAAiBna,EAAGma,eAAgBC,EAAmBpa,EAAGoa,iBAAkBC,EAA6Bra,EAAGqa,2BAA4BxI,EAAmB7R,EAAG6R,iBAAkByI,EAA8Bta,EAAGsa,4BACze,OAAO,SAAUta,EAAI4P,GACjB,IAAImH,EAAS/W,EAAG+W,OAAQlX,EAAQG,EAAGH,MAAO0a,EAAava,EAAGua,WAAY7E,EAAwB1V,EAAG0V,sBAAuB8E,EAAcxa,EAAGwa,iBACzH,IAAZ5K,IAAsBA,EAAU,IACpC,IAOI6K,EAgBA1S,EAUA2S,EAYAC,EA6BAC,EAWAC,EArFAC,EAAeN,EAAYM,aAAcC,EAAcP,EAAYO,YAYnEC,EFtBZ,WACI,IAAIC,EAAW1B,GAAM1G,KAAI,WAAc,OAAO,IAAIqI,QAC9CC,EAAoB,GACpBH,EAAa,CACbI,kBAAmB,WAAc,OAAOH,EAASpK,SAAQ,SAAUwK,GAAW,OAAOA,EAAQC,YAC7FC,oBAAqB,SAAU1b,GAC3B,OAAO0Z,GAAM1I,SAAQ,SAAU2K,GAC3B,IAAIxb,EAC+B,QAAlCA,EAAKmb,EAAkBK,UAA0B,IAAPxb,GAAyBA,EAAGgJ,KAAKmS,GAC5E,IAAIM,EAAK,KAAOD,EACZE,EAAe7b,EAAM4b,GACrBC,IACAP,EAAkBK,GAAQR,EAAWS,GAAIC,SAezD,OAVAT,EAASpK,SAAQ,SAAUwK,EAASzN,GAChCoN,EAAW,KAAOzB,GAAM3L,IAAM,SAAU+N,GAAW,OAAON,EAAQ3O,IAAIiP,IACtEX,EAAW,SAAWzB,GAAM3L,IAAM,WAE9B,IADA,IAAIgO,EAAO,GACFC,EAAK,EAAGA,EAAKpV,UAAUjB,OAAQqW,IACpCD,EAAKC,GAAMpV,UAAUoV,GAEzB,OAAOR,EAAQS,OAAOvV,MAAM8U,EAAS5M,YAAc,GAAI/L,YAAOkZ,SAG/DZ,EELce,GAIblT,EJxCsC,CAC9CmT,WAAW,EACXvD,YAAY,EACZ3P,gBAAgB,EAChB/E,OAAQ4C,cACRsV,YAAatV,eIkDLuV,EAAiBrT,EACjBsT,EAAmBrB,EASnBsB,EAAc5D,KASd6D,GAAwB,EAMxBC,EAAS,IAAIC,IAKbC,EAAqB,IAAID,IAMzBE,EAAmB,GAYnBC,EAAa3a,YAAS,GAAI+Y,GAU9B,SAAStP,IACAiP,IAEDlY,EAAQoa,sBAMRC,aAAmBV,EAAeD,YAAaC,EAAenY,OAAQoY,GAOtEU,aAAeT,EAAYzD,WAAYyD,EAAY1D,gBAAiBwD,EAAeD,YAAanB,IAEpGgC,IACA7C,EAAeQ,EAAUM,IAE7B,SAAS+B,IACL,IAAIC,EAAiBjC,EACrB,GAAIH,GAAcA,EAAWlG,WAAY,CACrC,IAAIuI,EAAmBrC,EAAWsC,kBAAkB1a,GAChDya,IACAD,EAAiBC,GAEzBjD,EAAMxX,EAASwY,EAAagC,EAAgBb,EAAgBE,EAAaxM,EAAS/P,GAEtF,SAASqd,IACLlC,EAAWmC,aAAarC,GAsB5B,SAASsC,IACL7a,EAAQ8a,WAAWxM,QAAQyM,IA0B/B,IAAIC,EAAsBjD,EAA4Bza,GACtD,IAAK,IAAIgP,KAAO0O,EAAqB,CACjC,IAAIpb,EAAQob,EAAoB1O,QACN9H,IAAtB+T,EAAajM,IAAsB2O,aAAcrb,IACjDA,EAAMyI,IAAIkQ,EAAajM,IAAM,GAMrC,IAAI4O,EAAwBC,aAA2B7d,GACnD8d,EAAgBC,aAAmB/d,GACnC0C,EAAUR,YAASA,YAAS,CAAE+X,SAAUA,EAKxC3Y,QAAS,KAITqB,MAAOuU,EAASA,EAAOvU,MAAQ,EAAI,EAAGuU,OAAQA,EAAQ0C,SAAU,IAAI1F,IAKpE8J,KAAM9G,EAAStI,YAAcA,YAAc,GAAI/L,YAAOqU,EAAO8G,OAAQ,CAAC9G,IAAW,GAAIsG,WAAYtG,EAASA,EAAOsG,WAAa,IAAI7D,GAIlIe,WAAYA,EACZ1R,WAAYA,EAMZsH,gBAAiBwN,EAAgB,IAAI5J,SAAQhN,EAO7C+W,eAAW/W,EASX4N,uBAAwBoB,QAAmB,OAAXgB,QAA8B,IAAXA,OAAoB,EAASA,EAAOgH,aAKvFrI,sBAAuBA,EAMvBqI,UAAW,WAAc,OAAOhI,QAAQ0E,IAAcxY,MAAO,SAAU+b,GACnEvD,EAAWlY,EAAQpB,QAAU6c,EAC7Bzb,EAAQ0b,QAAQ1b,GACZob,GAAiB5G,IAAW0G,IAC5B5C,EAAmC,OAAX9D,QAA8B,IAAXA,OAAoB,EAASA,EAAOmH,gBAAgB3b,IAExF,OAAXwU,QAA8B,IAAXA,GAA6BA,EAAO0C,SAAS/M,IAAInK,IAKxE4b,QAAS,WACLC,KAAWlB,OAAOA,GAClBkB,KAAW5S,OAAOA,GAClB4S,KAAWC,UAAU9b,EAAQ+b,wBAC7B9B,EAAmB3L,SAAQ,SAAUvE,GAAU,OAAOA,OACtD/J,EAAQgc,sBACRhc,EAAQ8a,WAAW/Q,OAAO/J,GACA,OAA1BsY,QAA4D,IAA1BA,GAA4CA,IACnE,OAAX9D,QAA8B,IAAXA,GAA6BA,EAAO0C,SAASlE,OAAOhT,GAClC,OAArCmY,QAAkF,IAArCA,GAAuDA,IACpGM,EAAWI,qBAKf8C,gBAAiB,SAAUpN,GACvB,IAAI9Q,EACAwe,EAAqBjc,EAAQkc,wBACjC,GAAID,EAEA,OAD8C,QAA7Cxe,EAAKwe,EAAmBrO,uBAAoC,IAAPnQ,GAAyBA,EAAG0M,IAAIoE,GAC/E,WAAc,OAAO0N,EAAmBrO,gBAAgBoF,OAAOzE,KAG9Ee,iBAAkB,SAAU6M,GAIxB,OAAK7M,GAAoBiI,IAAa4E,EAAM5E,SAErCjI,EAAiBtP,EAAQsV,cAAe6G,EAAM7G,eAD1C,GAOf4G,sBAAuB,WACnB,OAAOd,EAAgBpb,EAAqB,OAAXwU,QAA8B,IAAXA,OAAoB,EAASA,EAAO0H,yBAO5FE,+BAAgC5H,EAC1BA,EAAO4H,+BACP,WACE,OAAOC,KAAKP,UAAU9b,EAAQ6a,4BAA4B,GAAO,IAKzEyB,YAAa,WAAc,OAAOhf,EAAMif,UAIxCjH,YAAa,WAAc,OAAO4C,GAIlCsE,eAAgB,SAAUlQ,GAAO,OAAOiM,EAAajM,IAASmQ,eAAgB,SAAUnQ,EAAK1M,GAAS,OAAQ2Y,EAAajM,GAAO1M,GAMlI8c,gBAAiB,WAAc,OAAOnE,GAKtC5R,cAAe,SAAUgW,GACjB3c,EAAQub,YAAcoB,IAE1B3c,EAAQub,UAAYoB,EACpB3c,EAAQ4c,mBASZ9P,qBAAsB,SAAUtL,EAAQqb,GAEpC,YADkB,IAAdA,IAAwBA,GAAY,GACjC/P,EAAqB9M,EAASwB,EAAQlE,EAAOuf,IAMxDpQ,SAAU,SAAUH,EAAK1M,GAEjBI,EAAQuM,SAASD,IACjBtM,EAAQ8c,YAAYxQ,GACxByN,EAAO1R,IAAIiE,EAAK1M,GAChB2Y,EAAajM,GAAO1M,EAAM4I,MAhMlC,SAA2B8D,EAAK1M,GAC5B,IAAImd,EAAiBnd,EAAM+I,UAAS,SAAUqU,GAC1CzE,EAAajM,GAAO0Q,EACpB1f,EAAM2f,UAAYZ,KAAK1B,OAAOA,GAAQ,GAAO,MAE7CuC,EAAwBtd,EAAMud,gBAAgBnd,EAAQ4c,gBAC1D3C,EAAmB5R,IAAIiE,GAAK,WACxByQ,IACAG,OAyLAE,CAAkB9Q,EAAK1M,IAK3Bkd,YAAa,SAAUxQ,GACnB,IAAI7O,EACJsc,EAAO/G,OAAO1G,GACyB,QAAtC7O,EAAKwc,EAAmBzR,IAAI8D,UAAyB,IAAP7O,GAAyBA,IACxEwc,EAAmBjH,OAAO1G,UACnBiM,EAAajM,GACpBwL,EAA2BxL,EAAKkM,IAKpCjM,SAAU,SAAUD,GAAO,OAAOyN,EAAO7G,IAAI5G,IAK7CE,SAAU,SAAUF,EAAK+Q,GACrB,IAAIzd,EAAQma,EAAOvR,IAAI8D,GAKvB,YAJc9H,IAAV5E,QAAwC4E,IAAjB6Y,IACvBzd,EAAQ8M,YAAY2Q,GACpBrd,EAAQyM,SAASH,EAAK1M,IAEnBA,GAKX0d,aAAc,SAAUlJ,GAAY,OAAO2F,EAAOzL,QAAQ8F,IAM1DmJ,UAAW,SAAUjR,GAAO,IAAI7O,EAAI,OAAoC,QAA5BA,EAAK8a,EAAajM,UAAyB,IAAP7O,EAAgBA,EAAKka,EAAsBO,EAAU5L,EAAKe,IAK1ImQ,cAAe,SAAUlR,EAAK1M,GAC1Bua,EAAW7N,GAAO1M,GAMtB0T,cAAe,SAAUhH,GACrB,GAAIgH,EAAe,CACf,IAAI9R,EAAS8R,EAAchW,EAAOgP,GAClC,QAAe9H,IAAXhD,IAAyByZ,aAAczZ,GACvC,OAAOA,EAEf,OAAO2Y,EAAW7N,KACjBmM,GAAa,CAIlBjB,MAAO,WAEH,OADA+C,IACO/B,GAKXoE,eAAgB,WACZP,KAAKpT,OAAOA,GAAQ,GAAO,IAQ/BnC,WAAYmC,EAKZ1J,SAAU,SAAUke,GAChBngB,EAAQmgB,EACRhF,EAAWO,oBAAoByE,GAC/BvD,ECjchB,SAAqCla,EAASgL,EAAMC,GAChD,IAAIxN,EACJ,IAAK,IAAI6O,KAAOtB,EAAM,CAClB,IAAI0S,EAAY1S,EAAKsB,GACjBqR,EAAY1S,EAAKqB,GACrB,GAAI2O,aAAcyC,GAKd1d,EAAQyM,SAASH,EAAKoR,QAErB,GAAIzC,aAAc0C,GAKnB3d,EAAQyM,SAASH,EAAKI,YAAYgR,SAEjC,GAAIC,IAAcD,EAMnB,GAAI1d,EAAQuM,SAASD,GAAM,CACvB,IAAIsR,EAAgB5d,EAAQwM,SAASF,IAEpCsR,EAAcC,aAAeD,EAAcvV,IAAIqV,QAGhD1d,EAAQyM,SAASH,EAAKI,YAAmD,QAAtCjP,EAAKuC,EAAQwc,eAAelQ,UAAyB,IAAP7O,EAAgBA,EAAKigB,IAKlH,IAAK,IAAIpR,KAAOrB,OACMzG,IAAdwG,EAAKsB,IACLtM,EAAQ8c,YAAYxQ,GAE5B,OAAOtB,EDyZwB8S,CAA4B9d,EAAS+X,EAA4Bza,GAAQ4c,IAC7F9I,SAAU,WAAc,OAAO9T,GAKlCygB,WAAY,SAAU9E,GAAQ,IAAIxb,EAAI,OAAiC,QAAzBA,EAAKH,EAAM0gB,gBAA6B,IAAPvgB,OAAgB,EAASA,EAAGwb,IAI3GnQ,qBAAsB,WAAc,OAAOxL,EAAM0K,YAIjDsJ,kBAAmB,SAAU2M,GAEzB,QADsB,IAAlBA,IAA4BA,GAAgB,GAC5CA,EACA,OAAkB,OAAXzJ,QAA8B,IAAXA,OAAoB,EAASA,EAAOlD,oBAClE,IAAK4J,EAAuB,CACxB,IAAIgD,GAAwB,OAAX1J,QAA8B,IAAXA,OAAoB,EAASA,EAAOlD,sBAAwB,GAIhG,YAHsB9M,IAAlBlH,EAAMmW,UACNyK,EAAUzK,QAAUnW,EAAMmW,SAEvByK,EAGX,IADA,IAAI7M,EAAU,GACLhG,EAAI,EAAGA,EAAI8S,GAAiB9S,IAAK,CACtC,IAAI+S,EAASC,GAAahT,GACtByG,EAAOxU,EAAM8gB,IACbpM,aAAeF,KAAkB,IAATA,KACxBT,EAAQ+M,GAAUtM,GAG1B,OAAOT,GAOX7J,uBAAwB,WACpBlB,EAAWmT,WAAY,EACvBzZ,EAAQ8a,WAAW3Q,IAAInK,IAM3Bse,qBAAsB,WAClBhY,EAAWC,gBAAiB,GAEhCgY,uBAAwB,WACpBve,EAAQgc,sBACR1V,EAAWC,gBAAiB,GAC7BV,eAAgB,WAAc,OAAOgU,GAAgB2E,cAAe,SAAUC,GAC7ErG,EAAaqG,GACdrE,kBAAmB,WAClB,OAAO9T,EAAWmT,WACdnT,EAAW4P,YACX2D,EAAY3D,YAKpBwI,qBAAsB,SAAU1d,EAAMgH,EAAYzC,QAC3B,IAAfA,IAAyBA,GAAa,GAC1C,IAAIoZ,EAAW3e,EAAQmI,iCAAiCnH,GACpDvD,EAAK8H,EACHe,EAAWsY,eAAe5d,GAC1BsF,EAAW9E,OAAOR,GAAOE,EAAMzD,EAAGyD,IACpC+B,EAD+CxF,EAAGwD,IACnCC,EAOnB,OANAyd,EAASvW,iBACTuW,EAAStW,IAAInH,GACbyd,EAAStW,IAAInH,GACbyd,EAAShW,UAAS,SAAU4C,GACxBvL,EAAQ0G,wBAAwB1F,EAAMuK,EAAGA,EAAItI,EAAQsC,MAElDvF,EAAQsH,mBAAmBtG,EAAM2d,EAAU,EAAG3W,IAKzDgU,oBAAqB,WACjB5V,aAAS,SAAUpF,GACf,OAAOhB,EAAQmI,iCAAiCnH,GAAM4H,WAQ9D6O,mBAAoB,SAAUoH,QACJ,IAAlBA,IAA4BA,GAAgB,GAChD,IAAIC,EAAcrH,EAAmBS,EAAU7K,GAG/C,OAFKwR,GACDE,aAAoBD,EAAavG,GAC9BuG,GAMX3W,+BAAgC,WAK5B,OAJAkQ,IAA6BA,EAA2B,CACpDzW,EAAG8K,YAAY,GACf7K,EAAG6K,YAAY,KAEZ2L,GAMX3R,wBAAyB,SAAU1F,EAAME,EAAKD,EAAKsE,GAE/C,IAAI/D,OADe,IAAf+D,IAAyBA,GAAa,GAEtCA,GACKe,EAAWsY,iBACZtY,EAAWsY,eAAiBxa,eAEhC5C,EAAS8E,EAAWsY,eAAe5d,KAGnCsF,EAAWsY,oBAAiBpa,EAC5BhD,EAAS8E,EAAW9E,OAAOR,IAE/BsF,EAAW4P,YAAa,EACxB1U,EAAON,IAAMA,EACbM,EAAOP,IAAMA,EAEb6Y,GAAwB,EACxBrB,EAAWuG,uBAQfC,uBAAwB,SAAUC,EAAOC,QACzB,IAARA,IAAkBA,EAAMtF,EAAYxU,QACxC,IAAI5H,EAAKuC,EAAQmI,iCAAkCvG,EAAInE,EAAGmE,EAAGC,EAAIpE,EAAGoE,EAChEud,GAAgB9Y,EAAWsY,iBAC1BtY,EAAWC,iBACX3E,EAAE0C,gBACFzC,EAAEyC,eACH4a,GAASE,IACThZ,aAAS,SAAUpF,GACf,IAAIvD,EAAK0hB,EAAIne,GAAOE,EAAMzD,EAAGyD,IAAKD,EAAMxD,EAAGwD,IAC3CjB,EAAQ0G,wBAAwB1F,EAAME,EAAKD,OASvDoe,kBAAmB,SAAUna,IEhmBzC,SAA+BpH,GAC3B,IAAI0H,EAAmB1H,EAAc2H,sBACrC,GAAKD,EAAL,CAIA,IAAI8Z,EAAiBtZ,YAAmBR,EAAiBK,iBAAiBR,OAAQvH,EAAc+H,iBAAiBR,QACjHe,aAAS,SAAUpF,GACflD,EAAc4I,wBAAwB1F,EAAMse,EAAete,GAAME,IAAKoe,EAAete,GAAMC,KAAK,WALhGnD,EAAcmhB,yBF8lBNM,CAAsBvf,GACtBA,EAAQwf,mBAAmB3F,EAAYxU,OAAQrF,EAAQ2F,iBAAmBkU,EAAYxU,OAAQH,IAKlG0S,eAAgB,WAAc,OAAOA,EAAe5X,EAASkY,EAAU5a,IAAWua,iBAAkB,WAAc,OAAOA,EAAiBK,EAAUM,IAAiBuD,uBAtdzK,WACI,GAAK/b,EAAQoa,oBAAb,CAEA,IAAI9X,EAAQuX,EAAYvX,MAAOC,EAAYsX,EAAYtX,UACnDkd,EAAiBld,EAAUX,EAC3B8d,EAAiBnd,EAAUV,EAC3B8d,EAAqB9F,EAAYxD,gBGvJjD,SAA4B5Y,EAAI2H,EAAIwa,EAAUC,GAC1C,IAAIvd,EAAQ7E,EAAG6E,MAAO+C,EAAS5H,EAAG4H,OAAQ8Q,EAAkB1Y,EAAG0Y,gBAAiB5T,EAAY9E,EAAG8E,UAC3Ff,EAAS4D,EAAG5D,OAKhBse,aAAS3J,EAAiB9Q,GAK1B0a,aAAgB5J,EAAiB5T,EAAWqd,GAU5CtF,aAAehY,EAAO6T,EAAiB3U,EAAQqe,GHkIvCG,CAAmBnG,EAAaF,EAAgB3Z,EAAQsb,KAAM/C,GAC9DuB,GACI9Z,EAAQigB,wBAAwBtG,EAAenY,OAAQc,GAC3DwX,GAAwB,EACxB,IAAIzD,EAAiBE,GAA+BjU,EAAOC,GACvD8T,IAAmBsJ,GAEnBF,IAAmBld,EAAUX,GAC7B8d,IAAmBnd,EAAUV,GAC7B7B,EAAQ4c,iBAEZ/C,EAAYxD,eAAiBA,IAqc7BwE,2BAA4B,WACxB7a,EAAQ8a,WAAWxM,QAAQ4R,IAO3B7D,KAAKP,UAAUjB,GAA4B,GAAO,IAGtDpV,oBAAqB,WACjB,QAAyBjB,IAArBgB,EAAgC,CAGhC,IAFA,IAAI2a,GAAc,EAET9U,EAAIrL,EAAQsb,KAAKrY,OAAS,EAAGoI,GAAK,EAAGA,IAAK,CAC/C,IAAI+U,EAAWpgB,EAAQsb,KAAKjQ,GAC5B,GAAI+U,EAAS9Z,WAAWmT,UAAW,CAC/B0G,EAAcC,EACd,OAGR5a,EAAmB2a,EAEvB,OAAO3a,GAEX6a,yBAA0B,WACtB,IAAIC,EAAiBtgB,EAAQyF,sBAC7B,GAAKa,EAAWsY,gBAAmB0B,IAEnCC,aAAgBja,EAAYga,EAAeha,YACvCka,aAAYF,IAAiB,CAC7B,IAAI9e,EAAS8E,EAAW9E,OACxB6Y,aAAmB7Y,EAAQA,EAAQ8e,EAAe5D,qBAG1D+D,qBAAsB,WAClB,OAAOjN,QAAQlW,EAAMojB,wBAKzBhF,QAAS,SAAUiF,GACfhH,EAAiBgH,EAAQra,WACzBsT,EAAmB+G,EAAQjE,kBAIU,OAArCvE,QAAkF,IAArCA,GAAuDA,IACpGA,EAAmC3C,aAAKmL,EAAQC,gBAAgB5gB,EAAQoc,gCAAiCuE,EAAQE,2BAA0B,WACvI,IAAIpjB,EACAuC,EAAQ+T,UACR/T,EAAQ8gB,SAAWC,IAASC,QAGU,QAArCvjB,EAAKuC,EAAQ2H,0BAAuC,IAAPlK,GAAyBA,EAAGgJ,KAAKzG,QAK3F+T,WAAW,EAAM+M,SAAUC,IAASE,WACxC,OAAOjhB,IAGf,SAASkgB,GAA6B3R,GAClCA,EAAM8R,2BAEV,SAAStF,GAA2BxM,GAChCA,EAAMwN,yBAEV,IInpBImF,GJmpBA7C,GAAenS,YAAc,CAAC,WAAY/L,YAAOwP,KACjDwO,GAAkBE,GAAapb,O,sCI3qB/Bke,GAAiB,IAAI3P,IAAI,CACzB,QACA,SACA,MACA,OACA,QACA,SACA,IACA,MAEA4P,GAAkB,SAAU9U,GAAO,OAAO6U,GAAejO,IAAI5G,IAI7D+U,GAAsB,SAAUzhB,EAAO0hB,GAGvC1hB,EAAMyI,IAAIiZ,GAAI,GACd1hB,EAAMyI,IAAIiZ,IAEVC,GAAgB,SAAUhW,GAC1B,OAAOA,IAAMG,KAAUH,IAAM9J,MAGjC,SAAWyf,GACPA,EAAoB,MAAY,QAChCA,EAAoB,OAAa,SACjCA,EAAoB,KAAW,OAC/BA,EAAoB,MAAY,QAChCA,EAAoB,IAAU,MAC9BA,EAAoB,OAAa,SANrC,CAOGA,KAAyBA,GAAuB,KACnD,IAAIM,GAAmB,SAAUC,EAAQC,GACrC,OAAO/f,WAAW8f,EAAOE,MAAM,MAAMD,KAErCE,GAAyB,SAAUC,EAAMC,GAAQ,OAAO,SAAUC,EAAOtkB,GACzE,IAAIgZ,EAAYhZ,EAAGgZ,UACnB,GAAkB,SAAdA,IAAyBA,EACzB,OAAO,EACX,IAAIuL,EAAWvL,EAAUrW,MAAM,sBAC/B,GAAI4hB,EACA,OAAOR,GAAiBQ,EAAS,GAAIF,GAGrC,IAAIL,EAAShL,EAAUrW,MAAM,oBAC7B,OAAIqhB,EACOD,GAAiBC,EAAO,GAAII,GAG5B,IAIfI,GAAgB,IAAIzQ,IAAI,CAAC,IAAK,IAAK,MACnC0Q,GAAgCC,KAAeC,QAAO,SAAU9V,GAAO,OAAQ2V,GAAc/O,IAAI5G,MAerG,IAAI+V,GAAmB,CAEnBC,MAAO,SAAU7kB,GACb,IAAImE,EAAInE,EAAGmE,EACX,OAAOA,EAAEX,IAAMW,EAAEV,KAErBqhB,OAAQ,SAAU9kB,GACd,IAAIoE,EAAIpE,EAAGoE,EACX,OAAOA,EAAEZ,IAAMY,EAAEX,KAErBshB,IAAK,SAAUT,EAAOtkB,GAClB,IAAI+kB,EAAM/kB,EAAG+kB,IACb,OAAO7gB,WAAW6gB,IAEtBC,KAAM,SAAUV,EAAOtkB,GACnB,IAAIglB,EAAOhlB,EAAGglB,KACd,OAAO9gB,WAAW8gB,IAEtBC,OAAQ,SAAUjlB,EAAI2H,GAClB,IAAIvD,EAAIpE,EAAGoE,EACP2gB,EAAMpd,EAAGod,IACb,OAAO7gB,WAAW6gB,IAAQ3gB,EAAEZ,IAAMY,EAAEX,MAExCyhB,MAAO,SAAUllB,EAAI2H,GACjB,IAAIxD,EAAInE,EAAGmE,EACP6gB,EAAOrd,EAAGqd,KACd,OAAO9gB,WAAW8gB,IAAS7gB,EAAEX,IAAMW,EAAEV,MAGzCU,EAAGggB,GAAuB,EAAG,IAC7B/f,EAAG+f,GAAuB,EAAG,KAyB7BgB,GAAmC,SAAU9kB,EAAe0D,EAAQmD,EAAQoI,QAC7D,IAAXpI,IAAqBA,EAAS,SACZ,IAAlBoI,IAA4BA,EAAgB,IAChDvL,EAAShC,YAAS,GAAIgC,GACtBuL,EAAgBvN,YAAS,GAAIuN,GAC7B,IAAI8V,EAAuBC,OAAOC,KAAKvhB,GAAQ4gB,OAAOhB,IAGlD4B,EAAyB,GACzBC,GAAsC,EACtCC,EAAuB,GAwE3B,GAvEAL,EAAqBvU,SAAQ,SAAUhC,GACnC,IAAI1M,EAAQ9B,EAAc0O,SAASF,GACnC,GAAKxO,EAAcyO,SAASD,GAA5B,CAEA,IAGI6W,EAHAjW,EAAOvI,EAAO2H,GACdgV,EAAK9f,EAAO8K,GACZ8W,EAAWrX,GAAuBmB,GAMtC,GAAI+F,YAAkBqO,GAElB,IADA,IAAI+B,EAAe/B,EAAGre,OACboI,EAAc,OAAViW,EAAG,GAAc,EAAI,EAAGjW,EAAIgY,EAAchY,IAC9C8X,EAMDjjB,YAAU6L,GAAuBuV,EAAGjW,MAAQ8X,EAAQ,2CALpDA,EAASpX,GAAuBuV,EAAGjW,IACnCnL,YAAUijB,IAAWC,GAChB7B,GAAc6B,IAAa7B,GAAc4B,GAAU,sEAQhEA,EAASpX,GAAuBuV,GAEpC,GAAI8B,IAAaD,EAGb,GAAI5B,GAAc6B,IAAa7B,GAAc4B,GAAS,CAClD,IAAIvkB,EAAUgB,EAAM4I,MACG,kBAAZ5J,GACPgB,EAAMyI,IAAI1G,WAAW/C,IAEP,kBAAP0iB,EACP9f,EAAO8K,GAAO3K,WAAW2f,GAEpBpW,MAAMC,QAAQmW,IAAO6B,IAAW1hB,MACrCD,EAAO8K,GAAOgV,EAAGhR,IAAI3O,kBAGN,OAAbyhB,QAAkC,IAAbA,OAAsB,EAASA,EAAS3M,aACvD,OAAX0M,QAA8B,IAAXA,OAAoB,EAASA,EAAO1M,aAC9C,IAATvJ,GAAqB,IAAPoU,GAGF,IAATpU,EACAtN,EAAMyI,IAAI8a,EAAO1M,UAAUvJ,IAG3B1L,EAAO8K,GAAO8W,EAAS3M,UAAU6K,IAMhC2B,IACDD,EA3IpB,SAAyCllB,GACrC,IAAIwlB,EAAoB,GAWxB,OAVApB,GAA8B5T,SAAQ,SAAUhC,GAC5C,IAAI1M,EAAQ9B,EAAc0O,SAASF,QACrB9H,IAAV5E,IACA0jB,EAAkBzgB,KAAK,CAACyJ,EAAK1M,EAAM4I,QACnC5I,EAAMyI,IAAIiE,EAAIzM,WAAW,SAAW,EAAI,OAI5CyjB,EAAkBrgB,QAClBnF,EAAcgJ,aACXwc,EA+HkCC,CAAgCzlB,GACzDmlB,GAAsC,GAE1CC,EAAqBrgB,KAAKyJ,GAC1BS,EAAcT,QACa9H,IAAvBuI,EAAcT,GACRS,EAAcT,GACd9K,EAAO8K,GACjB+U,GAAoBzhB,EAAO0hB,QAInC4B,EAAqBjgB,OAAQ,CAC7B,IAAIugB,EA1GmB,SAAUhiB,EAAQ1D,EAAe2lB,GAC5D,IAAIC,EAAa5lB,EAAc2Z,qBAC3BzX,EAAUlC,EAAcwX,cACxBqO,EAAuBhjB,iBAAiBX,GACxC4jB,EAAUD,EAAqBC,QAC/BC,EAAsB,CAAErB,IADsBmB,EAAqBnB,IACjCC,KAD6CkB,EAAqBlB,KACtDC,OADqEiB,EAAqBjB,OAC1EC,MAD0FgB,EAAqBhB,MACjGlM,UADoHkN,EAAqBlN,WAIzM,SAAZmN,GACA9lB,EAAc2e,eAAe,UAAWjb,EAAOoiB,SAAW,SAG9D9lB,EAAcgJ,aACd,IAAIgd,EAAahmB,EAAc2Z,qBAQ/B,OAPAgM,EAAYnV,SAAQ,SAAUhC,GAG1B,IAAI1M,EAAQ9B,EAAc0O,SAASF,GACnC+U,GAAoBzhB,EAAOyiB,GAAiB/V,GAAKoX,EAAYG,IAC7DriB,EAAO8K,GAAO+V,GAAiB/V,GAAKwX,EAAYH,MAE7CniB,EAqFmBuiB,CAAyBviB,EAAQ1D,EAAeolB,GAUtE,OARIF,EAAuB/f,QACvB+f,EAAuB1U,SAAQ,SAAU7Q,GACrC,IAAI2H,EAAKjF,YAAO1C,EAAI,GAAI6O,EAAMlH,EAAG,GAAIxF,EAAQwF,EAAG,GAChDtH,EAAc0O,SAASF,GAAKjE,IAAIzI,MAIxC9B,EAAcgJ,aACP,CAAEtF,OAAQgiB,EAAiBzW,cAAeA,GAGjD,MAAO,CAAEvL,OAAQA,EAAQuL,cAAeA,IAUhD,SAASiX,GAAelmB,EAAe0D,EAAQmD,EAAQoI,GACnD,OA5NmB,SAAUvL,GAC7B,OAAOshB,OAAOC,KAAKvhB,GAAQyiB,KAAK7C,IA2NzB8C,CAAiB1iB,GAClBohB,GAAiC9kB,EAAe0D,EAAQmD,EAAQoI,GAChE,CAAEvL,OAAQA,EAAQuL,cAAeA,GCzO3C,IAAIoX,GAAkB,SAAUrmB,EAAe0D,EAAQmD,EAAQoI,GAC3D,IAAItM,E7ByCR,SAA6B3C,EAAeL,EAAIsP,GAC5C,IAAI3H,EACA5D,EAAS2D,YAAO1H,EAAI,IACpBuC,EAAUlC,EAAcwX,cAC5B,KAAMtV,aAAmBokB,aACrB,MAAO,CAAE5iB,OAAQA,EAAQuL,cAAeA,GAiB5C,IAAK,IAAIT,KAdLS,IACAA,EAAgBvN,YAAS,GAAIuN,IAGjCjP,EAAcwf,cAAa,SAAU1d,GACjC,IAAIhB,EAAUgB,EAAM4I,MACpB,GAAK7I,EAAcf,GAAnB,CAEA,IAAI6B,EAAWV,EAAiBnB,EAASoB,GACrCS,GACAb,EAAMyI,IAAI5H,OAIFe,EAAQ,CACpB,IAAI5C,EAAU4C,EAAO8K,GACrB,GAAK3M,EAAcf,GAAnB,CAEA,IAAI6B,EAAWV,EAAiBnB,EAASoB,GACpCS,IAGLe,EAAO8K,GAAO7L,EAIVsM,IAC8B,QAA7B3H,EAAK2H,EAAcT,UAAyB,IAAPlH,IAAsB2H,EAAcT,GAAO1N,MAEzF,MAAO,CAAE4C,OAAQA,EAAQuL,cAAeA,G6B9EzBsX,CAAoBvmB,EAAe0D,EAAQuL,GAG1D,OAAOiX,GAAelmB,EAFtB0D,EAASf,EAASe,OAE2BmD,EAD7CoI,EAAgBtM,EAASsM,gB,6BCM7B,IAAIuX,GAAa,CACb/M,SAAU,MACVI,sBAAuB,SAAU4M,EAAYjY,GACzC,GAAIkY,aAAgBlY,GAAM,CACtB,IAAImY,EAAcC,aAAoBpY,GACtC,OAAOmY,GAAcA,EAAYE,SAAe,EAGhD,IAXc3kB,EAWV4kB,GAXU5kB,EAWuBukB,EAVtC7jB,OAAOC,iBAAiBX,IAWvB,OAASL,aAAc2M,GACjBsY,EAAchkB,iBAAiB0L,GAC/BsY,EAActY,KAAS,GAGrCgD,iBAAkB,SAAUnG,EAAGC,GAM3B,OAAsC,EAA/BD,EAAE0b,wBAAwBzb,GAAS,GAAK,GAEnDkK,cAAe,SAAUhW,EAAOgP,GAC5B,IAAI7O,EACJ,OAA8B,QAAtBA,EAAKH,EAAMwnB,aAA0B,IAAPrnB,OAAgB,EAASA,EAAG6O,IAEtEmL,mBAAoB,SAAUzX,EAASvC,GACnC,IAAIS,EAAqBT,EAAGS,mBAC5B,OAAO6mB,aAAe/kB,EAAS9B,IASnC0Z,eAAgB,SAAU5X,EAASukB,EAAYjnB,GAC3C,IAAI0nB,EAAoB1nB,EAAM0nB,kBAC9BT,EAAWO,MAAMrO,UAAYuO,EACvBA,EAAkB,GAAI,IACtB,OAENhlB,EAAQ4c,kBAEZ/E,iBAAkB,SAAUK,EAAU+M,GAClC/M,EAAS4M,MAAMrO,UAAYwO,EAAaH,MAAMrO,WAElDqB,2BAA4B,SAAUxL,EAAK7O,GACvC,IAAIynB,EAAOznB,EAAGynB,KAAMJ,EAAQrnB,EAAGqnB,aACxBI,EAAK5Y,UACLwY,EAAMxY,IAMjBQ,qBAAsB,SAAU9M,EAASvC,EAAI2H,EAAIoW,GAC7C,IAAI2J,EAAkB/f,EAAG+f,qBACP,IAAd3J,IAAwBA,GAAY,GACxC,IAAIxT,EAAavK,EAAGuK,WAAY+E,EAAgBtP,EAAGsP,cAAevL,EAAS2D,YAAO1H,EAAI,CAAC,aAAc,kBACjGkH,EnB2BZ,SAAmBnD,EAAQwG,EAAYlK,GACnC,IAAIL,EAAI2H,EACJT,EAAS,GACb,IAAK,IAAI2H,KAAO9K,EACZmD,EAAO2H,GACiD,QAAnD7O,EAAKwP,GAAwBX,EAAKtE,UAAgC,IAAPvK,EAAgBA,EAA4C,QAAtC2H,EAAKtH,EAAc0O,SAASF,UAAyB,IAAPlH,OAAgB,EAASA,EAAGoD,MAEpK,OAAO7D,EmBlCUygB,CAAU5jB,EAAQwG,GAAc,GAAIhI,GAYjD,GARImlB,IACIpY,IACAA,EAAgBoY,EAAgBpY,IAChCvL,IACAA,EAAS2jB,EAAgB3jB,IACzBmD,IACAA,EAASwgB,EAAgBxgB,KAE7B6W,EAAW,EnBnCvB,SAAiC1d,EAAe0D,EAAQmD,GACpD,IAAIlH,EAAI2H,EAAI0C,EACRC,EACAsd,EAAevC,OAAOC,KAAKvhB,GAAQ4gB,QAAO,SAAU9V,GAAO,OAAQxO,EAAcyO,SAASD,MAC1FgZ,EAAeD,EAAapiB,OAChC,GAAKqiB,EAEL,IAAK,IAAIja,EAAI,EAAGA,EAAIia,EAAcja,IAAK,CACnC,IAAIiB,EAAM+Y,EAAaha,GACnBka,EAAc/jB,EAAO8K,GACrB1M,EAAQ,KAKRsL,MAAMC,QAAQoa,KACd3lB,EAAQ2lB,EAAY,IAOV,OAAV3lB,IACAA,EAAoG,QAA3FwF,EAA4B,QAAtB3H,EAAKkH,EAAO2H,UAAyB,IAAP7O,EAAgBA,EAAKK,EAAcyf,UAAUjR,UAAyB,IAAPlH,EAAgBA,EAAK5D,EAAO8K,SAM9H9H,IAAV5E,GAAiC,OAAVA,IAEN,kBAAVA,GLnF2B,iBAAiB8B,KKmFJ9B,GAE/CA,EAAQ+B,WAAW/B,IAEbwM,GAAcxM,IAAUmD,IAAQrB,KAAK6jB,KAC3C3lB,EAAQ4lB,YAAkBlZ,EAAKiZ,IAEnCznB,EAAc2O,SAASH,EAAKI,YAAY9M,IACV,QAA7BkI,GAAMC,EAAKpD,GAAQ2H,UAAyB,IAAPxE,IAAsBC,EAAGuE,GAAO1M,GACtE9B,EAAc0f,cAAclR,EAAK1M,KmBL7B6lB,CAAwBzlB,EAASwB,EAAQmD,GACzC,IAAI+gB,EAASvB,GAAgBnkB,EAASwB,EAAQmD,EAAQoI,GACtDA,EAAgB2Y,EAAO3Y,cACvBvL,EAASkkB,EAAOlkB,OAEpB,OAAOhC,YAAS,CAAEwI,WAAYA,EAC1B+E,cAAeA,GAAiBvL,IAExCuW,4BAA6BA,KAC7BP,MAAO,SAAUxX,EAASwY,EAAaD,EAAcjS,EAAYuT,EAAaxM,EAAS/P,QACzDkH,IAAtBxE,EAAQub,YACR/C,EAAYsM,MAAMnI,WAAa3c,EAAQub,UACjC,UACA,UAEV,IAAIoK,EAAuBrf,EAAWmT,WAAaI,EAAY3D,WAC/D0P,aAAgBpN,EAAaD,EAAcjS,EAAYuT,EAAaxM,EAAS/P,EAAM0nB,kBAAmBW,EAAuBpP,QAAiC/R,EAAWmhB,EACnK5O,QACAvS,IAEVyE,OAAQ4c,MAERC,GAAoBhoB,GAAcwmB,I,iDCpGlCyB,GAAmBjoB,GAAc0B,YAASA,YAAS,GAAI8kB,IAAa,CAAEhR,cAAe,SAAUhW,EAAOgP,GAClG,OAAOhP,EAAMgP,IAEjBqL,sBAAuB,SAAU4M,EAAYjY,GACzC,IAAI7O,EACJ,OAAI+mB,aAAgBlY,IAC4B,QAAnC7O,EAAKinB,aAAoBpY,UAAyB,IAAP7O,OAAgB,EAASA,EAAGknB,UAAY,GAEhGrY,EAAO0Z,KAAoB9S,IAAI5G,GAA0BA,EAAnB2Z,aAAY3Z,GAC3CiY,EAAW2B,aAAa5Z,KAEnCyL,4BAA6BA,KAC7BP,MAAO,SAAU2O,EAAU3N,EAAaD,EAAcjS,EAAYuT,EAAaxM,EAAS/P,GACpF,IAAIqoB,EAAuBrf,EAAWmT,WAAaI,EAAY3D,WAC/DkQ,aAAc5N,EAAaD,EAAcjS,EAAYuT,EAAaxM,EAAS/P,EAAM0nB,kBAAmBW,EAAuBpP,QAAiC/R,EAAWmhB,EACjK5O,QACAvS,IACPyE,OAAQod,Q,SCrBXC,GAAe9mB,YAASA,YAAS,CAAE+mB,SCJV,SAAUhc,EAAW8C,GAC9C,OAAOmZ,aAAejc,GAChBwb,GAAiB1Y,EAAS,CAAEoZ,4BAA4B,IACxDX,GAAkBzY,EAAS,CAAEoZ,4BAA4B,MDCQtgB,IAAauO,IEApFgS,GAASlnB,YAASA,YAASA,YAAS,GAAI8mB,IAAe/oB,GAAOiN","file":"static/js/4.122064b5.chunk.js","sourcesContent":["var makeRenderlessComponent = function (hook) { return function (props) {\n    hook(props);\n    return null;\n}; };\n\nexport { makeRenderlessComponent };\n","import { useDrag } from '../../gestures/drag/use-drag.js';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { PanSession } from './PanSession.js';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @internalremarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n","import { __assign } from 'tslib';\nimport { useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.js';\nimport { VisualElementDragControls } from './VisualElementDragControls.js';\nimport { useConstant } from '../../utils/use-constant.js';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    var groupDragControls = props.dragControls, visualElement = props.visualElement;\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var dragControls = useConstant(function () {\n        return new VisualElementDragControls({\n            visualElement: visualElement,\n        });\n    });\n    dragControls.setProps(__assign(__assign({}, props), { transformPagePoint: transformPagePoint }));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(function () { return groupDragControls && groupDragControls.subscribe(dragControls); }, [dragControls]);\n    // Mount the drag controls with the visualElement\n    useEffect(function () { return dragControls.mount(visualElement); }, []);\n}\n\nexport { useDrag };\n","import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\" + current + \"\\\". This may indicate a circular fallback dependency.\");\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof HTMLElement))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { __assign } from 'tslib';\nimport { complex, px } from 'style-value-types';\nimport { mix } from 'popmotion';\nimport { cssVariableRegex } from '../utils/css-variables-conversion.js';\n\nfunction pixelsToPercent(pixels, axis) {\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nfunction correctBorderRadius(latest, _layoutState, _a) {\n    var target = _a.target;\n    /**\n     * If latest is a string, if it's a percentage we can return immediately as it's\n     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n     */\n    if (typeof latest === \"string\") {\n        if (px.test(latest)) {\n            latest = parseFloat(latest);\n        }\n        else {\n            return latest;\n        }\n    }\n    /**\n     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n     * pixel value as a percentage of each axis\n     */\n    var x = pixelsToPercent(latest, target.x);\n    var y = pixelsToPercent(latest, target.y);\n    return x + \"% \" + y + \"%\";\n}\nvar varToken = \"_$css\";\nfunction correctBoxShadow(latest, _a) {\n    var delta = _a.delta, treeScale = _a.treeScale;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n    if (containsCSSVariables) {\n        latest = latest.replace(cssVariableRegex, function (match) {\n            cssVariables.push(match);\n            return varToken;\n        });\n    }\n    var shadow = complex.parse(latest);\n    // TODO: Doesn't support multiple shadows\n    if (shadow.length > 5)\n        return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n    // Calculate the overall context scale\n    var xScale = delta.x.scale * treeScale.x;\n    var yScale = delta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n    var averageScale = mix(xScale, yScale, 0.5);\n    // Blur\n    if (typeof shadow[2 + offset] === \"number\")\n        shadow[2 + offset] /= averageScale;\n    // Spread\n    if (typeof shadow[3 + offset] === \"number\")\n        shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n    if (containsCSSVariables) {\n        var i_1 = 0;\n        output = output.replace(varToken, function () {\n            var cssVariable = cssVariables[i_1];\n            i_1++;\n            return cssVariable;\n        });\n    }\n    return output;\n}\nvar borderCorrectionDefinition = {\n    process: correctBorderRadius,\n};\nvar defaultScaleCorrectors = {\n    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ] }),\n    borderTopLeftRadius: borderCorrectionDefinition,\n    borderTopRightRadius: borderCorrectionDefinition,\n    borderBottomLeftRadius: borderCorrectionDefinition,\n    borderBottomRightRadius: borderCorrectionDefinition,\n    boxShadow: {\n        process: correctBoxShadow,\n    },\n};\n\nexport { correctBorderRadius, correctBoxShadow, defaultScaleCorrectors, pixelsToPercent };\n","import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n","import { __extends, __assign } from 'tslib';\nimport React__default, { useContext } from 'react';\nimport { isSharedLayout, SharedLayoutContext, FramerTreeLayoutContext } from '../../../context/SharedLayoutContext.js';\nimport { snapshotViewportBox } from '../../../render/dom/projection/utils.js';\n\n/**\n * This component is responsible for scheduling the measuring of the motion component\n */\nvar Measure = /** @class */ (function (_super) {\n    __extends(Measure, _super);\n    function Measure() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * If this is a child of a SyncContext, register the VisualElement with it on mount.\n     */\n    Measure.prototype.componentDidMount = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement = _a.visualElement;\n        isSharedLayout(syncLayout) && syncLayout.register(visualElement);\n        isSharedLayout(framerSyncLayout) &&\n            framerSyncLayout.register(visualElement);\n        visualElement.onUnmount(function () {\n            if (isSharedLayout(syncLayout)) {\n                syncLayout.remove(visualElement);\n            }\n            if (isSharedLayout(framerSyncLayout)) {\n                framerSyncLayout.remove(visualElement);\n            }\n        });\n    };\n    /**\n     * If this is a child of a SyncContext, notify it that it needs to re-render. It will then\n     * handle the snapshotting.\n     *\n     * If it is stand-alone component, add it to the batcher.\n     */\n    Measure.prototype.getSnapshotBeforeUpdate = function () {\n        var _a = this.props, syncLayout = _a.syncLayout, visualElement = _a.visualElement;\n        if (isSharedLayout(syncLayout)) {\n            syncLayout.syncUpdate();\n        }\n        else {\n            snapshotViewportBox(visualElement);\n            syncLayout.add(visualElement);\n        }\n        return null;\n    };\n    Measure.prototype.componentDidUpdate = function () {\n        var syncLayout = this.props.syncLayout;\n        if (!isSharedLayout(syncLayout))\n            syncLayout.flush();\n    };\n    Measure.prototype.render = function () {\n        return null;\n    };\n    return Measure;\n}(React__default.Component));\nfunction MeasureContextProvider(props) {\n    var syncLayout = useContext(SharedLayoutContext);\n    var framerSyncLayout = useContext(FramerTreeLayoutContext);\n    return (React__default.createElement(Measure, __assign({}, props, { syncLayout: syncLayout, framerSyncLayout: framerSyncLayout })));\n}\n\nexport { MeasureContextProvider };\n","import { AnimateLayoutContextProvider } from './Animate.js';\nimport { MeasureContextProvider } from './Measure.js';\n\nvar layoutAnimations = {\n    measureLayout: MeasureContextProvider,\n    layoutAnimation: AnimateLayoutContextProvider,\n};\n\nexport { layoutAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    var prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (var i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nvar isNumericalString = function (v) { return /^\\-?\\d*\\.?\\d+$/.test(v); };\n\nexport { isNumericalString };\n","/**\n * Tests a provided value against a ValueType\n */\nvar testValueType = function (v) { return function (type) { return type.test(v); }; };\n\nexport { testValueType };\n","import { number, px, percent, degrees, vw, vh } from 'style-value-types';\nimport { testValueType } from './test.js';\nimport { auto } from './type-auto.js';\n\n/**\n * A list of value types commonly used for dimensions\n */\nvar dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nvar findDimensionValueType = function (v) {\n    return dimensionValueTypes.find(testValueType(v));\n};\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nvar auto = {\n    test: function (v) { return v === \"auto\"; },\n    parse: function (v) { return v; },\n};\n\nexport { auto };\n","import { __spreadArray, __read } from 'tslib';\nimport { color, complex } from 'style-value-types';\nimport { dimensionValueTypes } from './dimensions.js';\nimport { testValueType } from './test.js';\n\n/**\n * A list of all ValueTypes\n */\nvar valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color, complex]);\n/**\n * Tests a value against the list of ValueTypes\n */\nvar findValueType = function (v) { return valueTypes.find(testValueType(v)); };\n\nexport { findValueType };\n","import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { complex } from 'style-value-types';\nimport { isNumericalString } from '../../utils/is-numerical-string.js';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.js';\nimport { motionValue } from '../../value/index.js';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.js';\nimport { findValueType } from '../dom/value-types/find.js';\nimport { resolveVariant } from './variants.js';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n    var _a = resolved\n        ? visualElement.makeTargetAnimatable(resolved, false)\n        : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b; _a.transition; var target = __rest(_a, [\"transitionEnd\", \"transition\"]);\n    target = __assign(__assign({}, target), transitionEnd);\n    for (var key in target) {\n        var value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    var reversedLabels = __spreadArray([], __read(variantLabels)).reverse();\n    reversedLabels.forEach(function (key) {\n        var _a;\n        var variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b, _c;\n    var _d;\n    var newValueKeys = Object.keys(target).filter(function (key) { return !visualElement.hasValue(key); });\n    var numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (var i = 0; i < numNewValues; i++) {\n        var key = newValueKeys[i];\n        var targetValue = target[key];\n        var value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" && isNumericalString(value)) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value));\n        (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : (_d[key] = value);\n        visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    var valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a, _b;\n    var origin = {};\n    for (var key in target) {\n        origin[key] =\n            (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { __read, __rest, __assign } from 'tslib';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { setTarget } from './setters.js';\nimport { resolveVariant } from './variants.js';\n\n/**\n * @internal\n */\nfunction animateVisualElement(visualElement, definition, options) {\n    if (options === void 0) { options = {}; }\n    visualElement.notifyAnimationStart();\n    var animation;\n    if (Array.isArray(definition)) {\n        var animations = definition.map(function (variant) {\n            return animateVariant(visualElement, variant, options);\n        });\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        var resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(function () {\n        return visualElement.notifyAnimationComplete(definition);\n    });\n}\nfunction animateVariant(visualElement, variant, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    var resolved = resolveVariant(visualElement, variant, options.custom);\n    var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {} : _b;\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    var getAnimation = resolved\n        ? function () { return animateTarget(visualElement, resolved, options); }\n        : function () { return Promise.resolve(); };\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? function (forwardDelay) {\n            if (forwardDelay === void 0) { forwardDelay = 0; }\n            var _a = transition.delayChildren, delayChildren = _a === void 0 ? 0 : _a, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : function () { return Promise.resolve(); };\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    var when = transition.when;\n    if (when) {\n        var _c = __read(when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation], 2), first = _c[0], last = _c[1];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;\n    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, [\"transition\", \"transitionEnd\"]);\n    if (transitionOverride)\n        transition = transitionOverride;\n    var animations = [];\n    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);\n    for (var key in target) {\n        var value = visualElement.getValue(key);\n        var valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        var animation = startAnimation(key, value, valueTarget, __assign({ delay: delay }, transition));\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(function () {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {\n    if (delayChildren === void 0) { delayChildren = 0; }\n    if (staggerChildren === void 0) { staggerChildren = 0; }\n    if (staggerDirection === void 0) { staggerDirection = 1; }\n    var animations = [];\n    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    var generateStaggerDuration = staggerDirection === 1\n        ? function (i) {\n            if (i === void 0) { i = 0; }\n            return i * staggerChildren;\n        }\n        : function (i) {\n            if (i === void 0) { i = 0; }\n            return maxStaggerDuration - i * staggerChildren;\n        };\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach(function (child, i) {\n        animations.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function () { return child.notifyAnimationComplete(variant); }));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.forEachValue(function (value) { return value.stop(); });\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_a, key) {\n    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;\n    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n","import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.js';\nimport { shallowCompare } from '../../utils/shallow-compare.js';\nimport { animateVisualElement } from './animation.js';\nimport { AnimationType } from './types.js';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.js';\n\nvar variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Focus,\n    AnimationType.Exit,\n];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return function (animations) {\n        return Promise.all(animations.map(function (_a) {\n            var animation = _a.animation, options = _a.options;\n            return animateVisualElement(visualElement, animation, options);\n        }));\n    };\n}\nfunction createAnimationState(visualElement) {\n    var animate = animateList(visualElement);\n    var state = createState();\n    var allAnimatedKeys = {};\n    var isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    var buildResolvedTypeValues = function (acc, definition) {\n        var resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n        }\n        return acc;\n    };\n    function isAnimated(key) {\n        return allAnimatedKeys[key] !== undefined;\n    }\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        var props = visualElement.getProps();\n        var context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        var animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        var removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        var encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        var removedVariantIndex = Infinity;\n        var _loop_1 = function (i) {\n            var type = reversePriorityOrder[i];\n            var typeState = state[type];\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            var propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = __assign({}, encounteredKeys);\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                return \"continue\";\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            var definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n            var markToAnimate = function (key) {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (var key in allKeys) {\n                var next = resolvedValues[key];\n                var prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev)) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\n                    animation: animation,\n                    options: __assign({ type: type }, options),\n                }); }))));\n            }\n        };\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (var i = 0; i < numAnimationTypes; i++) {\n            _loop_1(i);\n        }\n        allAnimatedKeys = __assign({}, encounteredKeys);\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            var fallbackAnimation_1 = {};\n            removedKeys.forEach(function (key) {\n                var fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation_1[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation_1 });\n        }\n        var shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        return animateChanges(options, type);\n    }\n    return {\n        isAnimated: isAnimated,\n        animateChanges: animateChanges,\n        setActive: setActive,\n        setAnimateFunction: setAnimateFunction,\n        getState: function () { return state; },\n    };\n}\nfunction variantsHaveChanged(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (isVariantLabels(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive) {\n    if (isActive === void 0) { isActive = false; }\n    return {\n        isActive: isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    var _a;\n    return _a = {},\n        _a[AnimationType.Animate] = createTypeState(true),\n        _a[AnimationType.Hover] = createTypeState(),\n        _a[AnimationType.Tap] = createTypeState(),\n        _a[AnimationType.Drag] = createTypeState(),\n        _a[AnimationType.Focus] = createTypeState(),\n        _a[AnimationType.Exit] = createTypeState(),\n        _a;\n}\n\nexport { createAnimationState, variantPriorityOrder, variantsHaveChanged };\n","import { __read } from 'tslib';\nimport { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.js';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.js';\nimport { PresenceContext } from '../../context/PresenceContext.js';\nimport { createAnimationState } from '../../render/utils/animation-state.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar animations = {\n    animation: makeRenderlessComponent(function (_a) {\n        var visualElement = _a.visualElement, animate = _a.animate;\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(function () { return animate.subscribe(visualElement); }, [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent(function (props) {\n        var custom = props.custom, visualElement = props.visualElement;\n        var _a = __read(usePresence(), 2), isPresent = _a[0], onExitComplete = _a[1];\n        var presenceContext = useContext(PresenceContext);\n        useEffect(function () {\n            var _a, _b;\n            var animation = (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });\n            !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { isMouseEvent } from './utils/event-type.js';\nimport { AnimationType } from '../render/utils/types.js';\nimport { usePointerEvent } from '../events/use-pointer-event.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return function (event, info) {\n        var _a;\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        callback === null || callback === void 0 ? void 0 : callback(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);\n    };\n}\nfunction useHoverGesture(_a) {\n    var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement = _a.visualElement;\n    usePointerEvent(visualElement, \"pointerenter\", onHoverStart || whileHover\n        ? createHoverEvent(visualElement, true, onHoverStart)\n        : undefined);\n    usePointerEvent(visualElement, \"pointerleave\", onHoverEnd || whileHover\n        ? createHoverEvent(visualElement, false, onHoverEnd)\n        : undefined);\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nvar isNodeOrChild = function (parent, child) {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.js';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.js';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.js';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.js';\n\nvar gestureAnimations = {\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { useRef } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.js';\nimport { usePointerEvent, addPointerEvent } from '../events/use-pointer-event.js';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.js';\nimport { pipe } from 'popmotion';\nimport { AnimationType } from '../render/utils/types.js';\nimport { isDragActive } from './drag/utils/lock.js';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture(_a) {\n    var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement = _a.visualElement;\n    var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    var isPressing = useRef(false);\n    var cancelPointerEndListeners = useRef(null);\n    function removePointerEndListener() {\n        var _a;\n        (_a = cancelPointerEndListeners.current) === null || _a === void 0 ? void 0 : _a.call(cancelPointerEndListeners);\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        var _a;\n        removePointerEndListener();\n        isPressing.current = false;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, false);\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.getInstance(), event.target)\n            ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info)\n            : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);\n    }\n    function onPointerCancel(event, info) {\n        if (!checkPointerEnd())\n            return;\n        onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);\n    }\n    function onPointerDown(event, info) {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp), addPointerEvent(window, \"pointercancel\", onPointerCancel));\n        onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Tap, true);\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? onPointerDown : undefined);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.js';\nimport { useDomEvent } from '../events/use-dom-event.js';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture(_a) {\n    var whileFocus = _a.whileFocus, visualElement = _a.visualElement;\n    var onFocus = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, true);\n    };\n    var onBlur = function () {\n        var _a;\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Focus, false);\n    };\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","import { axisBox, delta } from '../../utils/geometry/index.js';\n\nvar createProjectionState = function () { return ({\n    isEnabled: false,\n    isHydrated: false,\n    isTargetLocked: false,\n    target: axisBox(),\n    targetFinal: axisBox(),\n}); };\nfunction createLayoutState() {\n    return {\n        isHydrated: false,\n        layout: axisBox(),\n        layoutCorrected: axisBox(),\n        treeScale: { x: 1, y: 1 },\n        delta: delta(),\n        deltaFinal: delta(),\n        deltaTransform: \"\",\n    };\n}\nvar zeroLayout = createLayoutState();\n\nexport { createLayoutState, createProjectionState, zeroLayout };\n","import { zeroLayout } from '../../utils/state.js';\n\n/**\n * Build a transform style that takes a calculated delta between the element's current\n * space on screen and projects it into the desired space.\n */\nfunction buildLayoutProjectionTransform(_a, treeScale, latestTransform) {\n    var x = _a.x, y = _a.y;\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = x.translate / treeScale.x;\n    var yTranslate = y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \") \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \") \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \") \";\n    }\n    transform += \"scale(\" + x.scale + \", \" + y.scale + \")\";\n    return !latestTransform && transform === identityProjection ? \"\" : transform;\n}\n/**\n * Take the calculated delta origin and apply it as a transform string.\n */\nfunction buildLayoutProjectionTransformOrigin(_a) {\n    var deltaFinal = _a.deltaFinal;\n    return deltaFinal.x.origin * 100 + \"% \" + deltaFinal.y.origin * 100 + \"% 0\";\n}\nvar identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });\n\nexport { buildLayoutProjectionTransform, buildLayoutProjectionTransformOrigin, identityProjection };\n","import { __spreadArray, __read } from 'tslib';\nimport { SubscriptionManager } from '../../utils/subscription-manager.js';\n\nvar names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    var managers = names.map(function () { return new SubscriptionManager(); });\n    var propSubscriptions = {};\n    var lifecycles = {\n        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },\n        updatePropListeners: function (props) {\n            return names.forEach(function (name) {\n                var _a;\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                var on = \"on\" + name;\n                var propListener = props[on];\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach(function (manager, i) {\n        lifecycles[\"on\" + names[i]] = function (handler) { return manager.add(handler); };\n        lifecycles[\"notify\" + names[i]] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.notify.apply(manager, __spreadArray([], __read(args)));\n        };\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n","import { addUniqueItem, removeItem } from '../../utils/array.js';\nimport { compareByDepth } from './compare-by-depth.js';\n\nvar FlatTree = /** @class */ (function () {\n    function FlatTree() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    FlatTree.prototype.add = function (child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.remove = function (child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    };\n    FlatTree.prototype.forEach = function (callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    };\n    return FlatTree;\n}());\n\nexport { FlatTree };\n","import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { axisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { calcRelativeBox, updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { buildLayoutProjectionTransform } from './html/utils/build-projection-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\nimport { createLayoutState, createProjectionState } from './utils/state.js';\nimport { FlatTree } from './utils/flat-tree.js';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.js';\nimport { setCurrentViewportBox } from './dom/projection/relative-set.js';\nimport { isDraggable } from './utils/is-draggable.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;\n        if (options === void 0) { options = {}; }\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */\n        var projectionParent;\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (element.isProjectionReady()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            if (!element.isProjectionReady())\n                return;\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.y;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        function updateTreeLayoutProjection() {\n            element.layoutTree.forEach(fireUpdateLayoutProjection);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                instance = element.current = newInstance;\n                element.pointTo(element);\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            },\n            /**\n             *\n             */\n            unmount: function () {\n                cancelSync.update(update);\n                cancelSync.render(render);\n                cancelSync.preRender(element.updateLayoutProjection);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                element.stopLayoutAnimation();\n                element.layoutTree.remove(element);\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                lifecycles.clearAllListeners();\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () {\n                    return sync.preRender(element.updateTreeLayoutProjection, false, true);\n                }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n                element.layoutTree.add(element);\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            }, isProjectionReady: function () {\n                return projection.isEnabled &&\n                    projection.isHydrated &&\n                    layoutState.isHydrated;\n            }, \n            /**\n             * Start a layout animation on a given axis.\n             */\n            startLayoutAnimation: function (axis, transition, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = isRelative\n                    ? projection.relativeTarget[axis]\n                    : projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max, isRelative) {\n                if (isRelative === void 0) { isRelative = false; }\n                var target;\n                if (isRelative) {\n                    if (!projection.relativeTarget) {\n                        projection.relativeTarget = axisBox();\n                    }\n                    target = projection.relativeTarget[axis];\n                }\n                else {\n                    projection.relativeTarget = undefined;\n                    target = projection.target[axis];\n                }\n                projection.isHydrated = true;\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.relativeTarget &&\n                    !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                setCurrentViewportBox(element);\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,\n            updateTreeLayoutProjection: function () {\n                element.layoutTree.forEach(fireResolveRelativeTargetBox);\n                /**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */\n                sync.preRender(updateTreeLayoutProjection, false, true);\n                // sync.postRender(() => element.scheduleUpdateLayoutProjection())\n            },\n            getProjectionParent: function () {\n                if (projectionParent === undefined) {\n                    var foundParent = false;\n                    // Search backwards through the tree path\n                    for (var i = element.path.length - 1; i >= 0; i--) {\n                        var ancestor = element.path[i];\n                        if (ancestor.projection.isEnabled) {\n                            foundParent = ancestor;\n                            break;\n                        }\n                    }\n                    projectionParent = foundParent;\n                }\n                return projectionParent;\n            },\n            resolveRelativeTargetBox: function () {\n                var relativeParent = element.getProjectionParent();\n                if (!projection.relativeTarget || !relativeParent)\n                    return;\n                calcRelativeBox(projection, relativeParent.projection);\n                if (isDraggable(relativeParent)) {\n                    var target = projection.target;\n                    applyBoxTransforms(target, target, relativeParent.getLatestValues());\n                }\n            },\n            shouldResetTransform: function () {\n                return Boolean(props._layoutResetTransform);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireResolveRelativeTargetBox(child) {\n    child.resolveRelativeTargetBox();\n}\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n","import { motionValue } from '../../value/index.js';\nimport { isMotionValue } from '../../value/utils/is-motion-value.js';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    var _a;\n    for (var key in next) {\n        var nextValue = next[key];\n        var prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */\n            element.addValue(key, motionValue(nextValue));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                var existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (var key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\n\nfunction setCurrentViewportBox(visualElement) {\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent) {\n        visualElement.rebaseProjectionTarget();\n        return;\n    }\n    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    eachAxis(function (axis) {\n        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);\n    });\n}\n\nexport { setCurrentViewportBox };\n","import { resetBox, applyTreeDeltas } from '../../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../../utils/geometry/delta-calc.js';\n\nfunction updateLayoutDeltas(_a, _b, treePath, transformOrigin) {\n    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;\n    var target = _b.target;\n    /**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */\n    resetBox(layoutCorrected, layout);\n    /**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */\n    applyTreeDeltas(layoutCorrected, treeScale, treePath);\n    /**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */\n    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);\n}\n\nexport { updateLayoutDeltas };\n","import { __assign, __read } from 'tslib';\nimport { number, px } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.js';\nimport { invariant } from 'hey-listen';\nimport { transformProps } from '../../html/utils/transform.js';\nimport { findDimensionValueType } from '../value-types/dimensions.js';\n\nvar positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nvar isPositionalKey = function (key) { return positionalKeys.has(key); };\nvar hasPositionalKey = function (target) {\n    return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function (value, to) {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nvar isNumOrPxType = function (v) {\n    return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function (matrix, pos) {\n    return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {\n    var transform = _a.transform;\n    if (transform === \"none\" || !transform)\n        return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        var matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n}; };\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });\nfunction removeNonTranslationalTransform(visualElement) {\n    var removedTransforms = [];\n    nonTranslationalTransformKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nvar positionalValues = {\n    // Dimensions\n    width: function (_a) {\n        var x = _a.x;\n        return x.max - x.min;\n    },\n    height: function (_a) {\n        var y = _a.y;\n        return y.max - y.min;\n    },\n    top: function (_bbox, _a) {\n        var top = _a.top;\n        return parseFloat(top);\n    },\n    left: function (_bbox, _a) {\n        var left = _a.left;\n        return parseFloat(left);\n    },\n    bottom: function (_a, _b) {\n        var y = _a.y;\n        var top = _b.top;\n        return parseFloat(top) + (y.max - y.min);\n    },\n    right: function (_a, _b) {\n        var x = _a.x;\n        var left = _b.left;\n        return parseFloat(left) + (x.max - x.min);\n    },\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nvar convertChangedValueTypes = function (target, visualElement, changedKeys) {\n    var originBbox = visualElement.measureViewportBox();\n    var element = visualElement.getInstance();\n    var elementComputedStyle = getComputedStyle(element);\n    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;\n    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    var targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach(function (key) {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        var value = visualElement.getValue(key);\n        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nvar checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {\n    if (origin === void 0) { origin = {}; }\n    if (transitionEnd === void 0) { transitionEnd = {}; }\n    target = __assign({}, target);\n    transitionEnd = __assign({}, transitionEnd);\n    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    var removedTransformValues = [];\n    var hasAttemptedToRemoveTransformValues = false;\n    var changedValueTypeKeys = [];\n    targetPositionalKeys.forEach(function (key) {\n        var value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        var from = origin[key];\n        var to = target[key];\n        var fromType = findDimensionValueType(from);\n        var toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            var numKeyframes = to.length;\n            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                var current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues = removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(function (_a) {\n                var _b = __read(_a, 2), key = _b[0], value = _b[1];\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        return { target: convertedTarget, transitionEnd: transitionEnd };\n    }\n    else {\n        return { target: target, transitionEnd: transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target: target, transitionEnd: transitionEnd };\n}\n\nexport { BoundingBoxDimension, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.js';\nimport { unitConversion } from './unit-conversion.js';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nvar parseDomVariant = function (visualElement, target, origin, transitionEnd) {\n    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","import { __rest, __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.js';\nimport { getBoundingBox } from '../dom/projection/measure.js';\nimport { buildHTMLStyles } from './utils/build-styles.js';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.js';\nimport { parseDomVariant } from '../dom/utils/parse-dom-variant.js';\nimport { isTransformProp } from './utils/transform.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { renderHTML } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from './utils/build-projection-transform.js';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nvar htmlConfig = {\n    treeType: \"dom\",\n    readValueFromInstance: function (domElement, key) {\n        if (isTransformProp(key)) {\n            var defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            var computedStyle = getComputedStyle(domElement);\n            return ((isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0);\n        }\n    },\n    sortNodePosition: function (a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    },\n    getBaseTarget: function (props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    },\n    measureViewportBox: function (element, _a) {\n        var transformPagePoint = _a.transformPagePoint;\n        return getBoundingBox(element, transformPagePoint);\n    },\n    /**\n     * Reset the transform on the current Element. This is called as part\n     * of a batched process across the entire layout tree. To remove this write\n     * cycle it'd be interesting to see if it's possible to \"undo\" all the current\n     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms\n     * works\n     */\n    resetTransform: function (element, domElement, props) {\n        var transformTemplate = props.transformTemplate;\n        domElement.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        // Ensure that whatever happens next, we restore our transform on the next frame\n        element.scheduleRender();\n    },\n    restoreTransform: function (instance, mutableState) {\n        instance.style.transform = mutableState.style.transform;\n    },\n    removeValueFromRenderState: function (key, _a) {\n        var vars = _a.vars, style = _a.style;\n        delete vars[key];\n        delete style[key];\n    },\n    /**\n     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`\n     * can be animated by Motion.\n     */\n    makeTargetAnimatable: function (element, _a, _b, isMounted) {\n        var transformValues = _b.transformValues;\n        if (isMounted === void 0) { isMounted = true; }\n        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, [\"transition\", \"transitionEnd\"]);\n        var origin = getOrigin(target, transition || {}, element);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(element, target, origin);\n            var parsed = parseDomVariant(element, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return __assign({ transition: transition,\n            transitionEnd: transitionEnd }, target);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (element, renderState, latestValues, projection, layoutState, options, props) {\n        if (element.isVisible !== undefined) {\n            renderState.style.visibility = element.isVisible\n                ? \"visible\"\n                : \"hidden\";\n        }\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    },\n    render: renderHTML,\n};\nvar htmlVisualElement = visualElement(htmlConfig);\n\nexport { getComputedStyle, htmlConfig, htmlVisualElement };\n","import { __assign } from 'tslib';\nimport { visualElement } from '../index.js';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.js';\nimport { htmlConfig } from '../html/visual-element.js';\nimport { buildSVGAttrs } from './utils/build-attrs.js';\nimport { camelToDash } from '../dom/utils/camel-to-dash.js';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.js';\nimport { isTransformProp } from '../html/utils/transform.js';\nimport { renderSVG } from './utils/render.js';\nimport { getDefaultValueType } from '../dom/value-types/defaults.js';\nimport { buildLayoutProjectionTransformOrigin, buildLayoutProjectionTransform } from '../html/utils/build-projection-transform.js';\n\nvar svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {\n        return props[key];\n    },\n    readValueFromInstance: function (domElement, key) {\n        var _a;\n        if (isTransformProp(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return domElement.getAttribute(key);\n    },\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {\n        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;\n        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform\n            ? buildLayoutProjectionTransformOrigin\n            : undefined);\n    }, render: renderSVG }));\n\nexport { svgVisualElement };\n","import { __assign } from 'tslib';\nimport { animations } from '../../motion/features/animations.js';\nimport { gestureAnimations } from '../../motion/features/gestures.js';\nimport { createDomVisualElement } from './create-visual-element.js';\n\n/**\n * @public\n */\nvar domAnimation = __assign(__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);\n\nexport { domAnimation };\n","import { htmlVisualElement } from '../html/visual-element.js';\nimport { svgVisualElement } from '../svg/visual-element.js';\nimport { isSVGComponent } from './utils/is-svg-component.js';\n\nvar createDomVisualElement = function (Component, options) {\n    return isSVGComponent(Component)\n        ? svgVisualElement(options, { enableHardwareAcceleration: false })\n        : htmlVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { __assign } from 'tslib';\nimport { drag } from '../../motion/features/drag.js';\nimport { layoutAnimations } from '../../motion/features/layout/index.js';\nimport { domAnimation } from './features-animation.js';\n\n/**\n * @public\n */\nvar domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);\n\nexport { domMax };\n"],"sourceRoot":""}